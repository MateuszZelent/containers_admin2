"""Add user resource limits

Revision ID: d7c74c42412c
Revises: 075dc4526f80
Create Date: 2025-06-05 10:19:50.455907

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.types import TEXT


# revision identifiers, used by Alembic.
revision = 'd7c74c42412c'
down_revision = '075dc4526f80'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cli_tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('token_hash', sa.String(length=255), nullable=True),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_used_ip', sa.String(length=45), nullable=True),
    sa.Column('last_used_user_agent', sa.String(length=500), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cli_tokens_id'), 'cli_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_cli_tokens_token_hash'), 'cli_tokens', ['token_hash'], unique=True)
    op.create_table('queue_jobs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('job_id', sa.String(), nullable=True),
    sa.Column('job_name', sa.String(), nullable=True),
    sa.Column('simulation_file', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('node', sa.String(), nullable=True),
    sa.Column('output_dir', sa.String(), nullable=True),
    sa.Column('partition', sa.String(), nullable=True),
    sa.Column('num_cpus', sa.Integer(), nullable=True),
    sa.Column('memory_gb', sa.Integer(), nullable=True),
    sa.Column('num_gpus', sa.Integer(), nullable=True),
    sa.Column('time_limit', sa.String(), nullable=True),
    sa.Column('script', sa.Text(), nullable=True),
    sa.Column('mx_file', sa.String(), nullable=True),
    sa.Column('parameters', app.db.models.JSONEncodedDict(), nullable=True),
    sa.Column('results_file', sa.String(), nullable=True),
    sa.Column('progress', sa.Integer(), nullable=True),
    sa.Column('estimated_time', sa.String(), nullable=True),
    sa.Column('queued_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('finished_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_queue_jobs_id'), 'queue_jobs', ['id'], unique=False)
    op.create_index(op.f('ix_queue_jobs_job_id'), 'queue_jobs', ['job_id'], unique=True)
    op.create_table('task_queue_jobs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.String(), nullable=True),
    sa.Column('slurm_job_id', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('simulation_file', sa.String(), nullable=False),
    sa.Column('host_file_path', sa.String(), nullable=True),
    sa.Column('parameters', app.db.models.JSONEncodedDict(), nullable=True),
    sa.Column('partition', sa.String(), nullable=True),
    sa.Column('num_cpus', sa.Integer(), nullable=True),
    sa.Column('memory_gb', sa.Integer(), nullable=True),
    sa.Column('num_gpus', sa.Integer(), nullable=True),
    sa.Column('time_limit', sa.String(), nullable=True),
    sa.Column('output_dir', sa.String(), nullable=True),
    sa.Column('results_file', sa.String(), nullable=True),
    sa.Column('logs', sa.Text(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('progress', sa.Integer(), nullable=True),
    sa.Column('estimated_duration', sa.Integer(), nullable=True),
    sa.Column('previous_attempts', app.db.models.JSONEncodedDict(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('queued_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('submitted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('finished_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('next_retry_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('exit_code', sa.Integer(), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_task_queue_jobs_id'), 'task_queue_jobs', ['id'], unique=False)
    op.create_index(op.f('ix_task_queue_jobs_slurm_job_id'), 'task_queue_jobs', ['slurm_job_id'], unique=False)
    op.create_index(op.f('ix_task_queue_jobs_task_id'), 'task_queue_jobs', ['task_id'], unique=True)
    op.add_column('cluster_status', sa.Column('response_time_ms', sa.Integer(), nullable=True))
    op.add_column('cluster_status', sa.Column('active_jobs_count', sa.Integer(), nullable=True))
    op.alter_column('cluster_status', 'id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)
    op.alter_column('cluster_status', 'is_connected',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('cluster_status', 'last_check',
               existing_type=sa.DATETIME(),
               nullable=True)
    op.create_index(op.f('ix_cluster_status_id'), 'cluster_status', ['id'], unique=False)
    op.drop_column('cluster_status', 'created_at')
    op.add_column('slurm_job_snapshots', sa.Column('exit_code', sa.Integer(), nullable=True))
    op.add_column('slurm_job_snapshots', sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True))
    op.add_column('slurm_job_snapshots', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True))
    op.alter_column('slurm_job_snapshots', 'id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)
    op.alter_column('slurm_job_snapshots', 'job_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('slurm_job_snapshots', 'node_count',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('slurm_job_snapshots', 'is_current',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('1'))
    op.drop_index('ix_slurm_job_snapshots_user', table_name='slurm_job_snapshots')
    op.create_index(op.f('ix_slurm_job_snapshots_id'), 'slurm_job_snapshots', ['id'], unique=False)
    op.drop_column('slurm_job_snapshots', 'updated_at')
    op.add_column('ssh_tunnels', sa.Column('external_port', sa.Integer(), nullable=True))
    op.add_column('ssh_tunnels', sa.Column('internal_port', sa.Integer(), nullable=True))
    op.add_column('ssh_tunnels', sa.Column('remote_host', sa.String(), nullable=True))
    op.drop_column('ssh_tunnels', 'tunnel_pid')
    op.add_column('users', sa.Column('max_containers', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('max_gpus', sa.Integer(), nullable=True))
    op.alter_column('users', 'code_server_password',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'code_server_password',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('users', 'max_gpus')
    op.drop_column('users', 'max_containers')
    op.add_column('ssh_tunnels', sa.Column('tunnel_pid', sa.INTEGER(), nullable=True))
    op.drop_column('ssh_tunnels', 'remote_host')
    op.drop_column('ssh_tunnels', 'internal_port')
    op.drop_column('ssh_tunnels', 'external_port')
    op.add_column('slurm_job_snapshots', sa.Column('updated_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True))
    op.drop_index(op.f('ix_slurm_job_snapshots_id'), table_name='slurm_job_snapshots')
    op.create_index('ix_slurm_job_snapshots_user', 'slurm_job_snapshots', ['user'], unique=False)
    op.alter_column('slurm_job_snapshots', 'is_current',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('1'))
    op.alter_column('slurm_job_snapshots', 'node_count',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('slurm_job_snapshots', 'job_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('slurm_job_snapshots', 'id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)
    op.drop_column('slurm_job_snapshots', 'created_at')
    op.drop_column('slurm_job_snapshots', 'last_updated')
    op.drop_column('slurm_job_snapshots', 'exit_code')
    op.add_column('cluster_status', sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True))
    op.drop_index(op.f('ix_cluster_status_id'), table_name='cluster_status')
    op.alter_column('cluster_status', 'last_check',
               existing_type=sa.DATETIME(),
               nullable=False)
    op.alter_column('cluster_status', 'is_connected',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('cluster_status', 'id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)
    op.drop_column('cluster_status', 'active_jobs_count')
    op.drop_column('cluster_status', 'response_time_ms')
    op.drop_index(op.f('ix_task_queue_jobs_task_id'), table_name='task_queue_jobs')
    op.drop_index(op.f('ix_task_queue_jobs_slurm_job_id'), table_name='task_queue_jobs')
    op.drop_index(op.f('ix_task_queue_jobs_id'), table_name='task_queue_jobs')
    op.drop_table('task_queue_jobs')
    op.drop_index(op.f('ix_queue_jobs_job_id'), table_name='queue_jobs')
    op.drop_index(op.f('ix_queue_jobs_id'), table_name='queue_jobs')
    op.drop_table('queue_jobs')
    op.drop_index(op.f('ix_cli_tokens_token_hash'), table_name='cli_tokens')
    op.drop_index(op.f('ix_cli_tokens_id'), table_name='cli_tokens')
    op.drop_table('cli_tokens')
    # ### end Alembic commands ###