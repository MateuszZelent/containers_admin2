
> frontend@0.1.0 lint
> next lint --format=json

[{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/app/dashboard/components/app-sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":187,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5287,5290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5287,5290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport {\n  IconCamera,\n  IconDashboard,\n  IconFileAi,\n  IconFileDescription,\n  IconInnerShadowTop,\n  IconListCheck,\n} from \"@tabler/icons-react\"\nimport { Cog } from \"lucide-react\"\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/registry/new-york-v4/ui/sidebar\"\nimport { NavMain } from \"@/app//dashboard/components/nav-main\"\nimport { NavUser } from \"@/app/dashboard/components/nav-user\"\nimport { userApi } from \"@/lib/api-client\"\n\n// Default data with navigation items\nconst data = {\n  navMain: [\n    {\n      title: \"Dashboard\",\n      url: \"/dashboard\",\n      icon: IconDashboard,\n    },\n    {\n      title: \"Kolejka zadań\",\n      url: \"/dashboard/task_queue\",\n      icon: IconListCheck,\n    },\n    {\n      title: \"Ustawienia\",\n      url: \"/dashboard/settings\",\n      icon: Cog,\n    },\n  ],\n  navClouds: [\n    {\n      title: \"Capture\",\n      icon: IconCamera,\n      isActive: true,\n      url: \"#\",\n      items: [\n        {\n          title: \"Active Proposals\",\n          url: \"#\",\n        },\n        {\n          title: \"Archived\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Proposal\",\n      icon: IconFileDescription,\n      url: \"#\",\n      items: [\n        {\n          title: \"Active Proposals\",\n          url: \"#\",\n        },\n        {\n          title: \"Archived\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Prompts\",\n      icon: IconFileAi,\n      url: \"#\",\n      items: [\n        {\n          title: \"Active Proposals\",\n          url: \"#\",\n        },\n        {\n          title: \"Archived\",\n          url: \"#\",\n        },\n      ],\n    },\n  ],\n}\n\nexport function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {\n  // Stan dla danych użytkownika\n  const [userData, setUserData] = useState({\n    email: \"\",\n    name: \"\",\n    avatar: \"/avatars/shadcn.jpg\", // Domyślny awatar\n  });\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Pobierz dane użytkownika gdy komponent jest montowany\n  useEffect(() => {\n    const fetchUserData = async () => {\n      setIsLoading(true);\n      \n      // Najpierw sprawdź czy dane są w localStorage\n      try {\n        const storedUserData = localStorage.getItem('user_data');\n        if (storedUserData) {\n          const parsedUserData = JSON.parse(storedUserData);\n          // Sprawdź czy dane nie są przestarzałe (np. starsze niż 1 dzień)\n          const storedTime = localStorage.getItem('user_data_timestamp');\n          const isDataFresh = storedTime && (Date.now() - parseInt(storedTime)) < 86400000; // 24h\n          \n          if (isDataFresh) {\n            console.log(\"Using cached user data from localStorage\");\n            \n            // Upewnij się, że mamy prawidłowe pełne imię i nazwisko\n            const userData = ensureFullName(parsedUserData);\n            \n            setUserData({\n              name: userData.full_name || userData.username || \"User\",\n              email: userData.email || \"\",\n              avatar: \"/avatars/shadcn.jpg\",\n              ...userData\n            });\n            setIsLoading(false);\n            return;\n          }\n        }\n      } catch (error) {\n        console.error(\"Error reading user data from localStorage:\", error);\n        // Kontynuuj z pobraniem danych z API w przypadku błędu\n      }\n      \n      // Pobierz dane z API jeśli nie ma w localStorage lub są przestarzałe\n      try {\n        const response = await userApi.getCurrentUser();\n        \n        if (response && response.data) {\n          // Zapewnij poprawne formatowanie przed zapisaniem danych\n          const userDataFromApi = ensureFullName(response.data);\n          \n          // Zapisz w state\n          setUserData({\n            name: userDataFromApi.full_name || userDataFromApi.username || \"User\",\n            email: userDataFromApi.email || \"\",\n            avatar: \"/avatars/shadcn.jpg\", // Domyślny awatar\n            ...userDataFromApi\n          });\n          \n          // Zapisz w localStorage do ponownego użycia\n          localStorage.setItem('user_data', JSON.stringify(userDataFromApi));\n          localStorage.setItem('user_data_timestamp', Date.now().toString());\n          console.log(\"User data fetched from API and cached\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching user data from API:\", error);\n        // Próba użycia przestarzałych danych z localStorage w przypadku błędu API\n        const storedUserData = localStorage.getItem('user_data');\n        if (storedUserData) {\n          const parsedUserData = JSON.parse(storedUserData);\n          const userData = ensureFullName(parsedUserData);\n          \n          setUserData({\n            name: userData.full_name || userData.username || \"User\",\n            email: userData.email || \"\",\n            avatar: \"/avatars/shadcn.jpg\",\n            ...userData\n          });\n          console.log(\"Using outdated user data from localStorage due to API error\");\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchUserData();\n  }, []);\n\n  // Nowa funkcja pomocnicza do zapewnienia, że dane zawierają pole full_name\n  const ensureFullName = (userData: any) => {\n    // Kopiujemy dane, aby nie modyfikować oryginalnego obiektu\n    const enhancedData = { ...userData };\n    \n    // Generuj pełne imię i nazwisko, jeśli mamy te dane, a full_name nie jest ustawione\n    if (!enhancedData.full_name && (enhancedData.first_name || enhancedData.last_name)) {\n      const firstName = enhancedData.first_name || '';\n      const lastName = enhancedData.last_name || '';\n      enhancedData.full_name = `${firstName} ${lastName}`.trim();\n    }\n    \n    return enhancedData;\n  };\n\n  // Dodanie nasłuchiwania na zmiany w localStorage\n  useEffect(() => {\n    // Funkcja do odświeżania danych z localStorage\n    const handleStorageChange = () => {\n      const storedUserData = localStorage.getItem('user_data');\n      if (storedUserData) {\n        try {\n          const parsedUserData = JSON.parse(storedUserData);\n          setUserData({\n            name: parsedUserData.full_name || \n                 (parsedUserData.first_name && parsedUserData.last_name ? \n                  `${parsedUserData.first_name} ${parsedUserData.last_name}` : \n                  parsedUserData.username || \"User\"),\n            email: parsedUserData.email || \"\",\n            avatar: \"/avatars/shadcn.jpg\",\n            ...parsedUserData\n          });\n        } catch (error) {\n          console.error(\"Error parsing user data from localStorage:\", error);\n        }\n      }\n    };\n\n    // Dodaj nasłuchiwanie na zdarzenie storage\n    window.addEventListener('storage', handleStorageChange);\n    \n    // Dodatkowo możemy nasłuchiwać na własne zdarzenie dla aktualizacji w tym samym oknie\n    window.addEventListener('user-data-updated', handleStorageChange);\n\n    // Usunięcie nasłuchiwania przy odmontowaniu\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('user-data-updated', handleStorageChange);\n    };\n  }, []);\n\n  return (\n    <Sidebar collapsible=\"offcanvas\" {...props}>\n      <SidebarHeader>\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton\n              asChild\n              className=\"data-[slot=sidebar-menu-button]:!p-1.5\"\n            >\n              <a href=\"#\">\n                <IconInnerShadowTop className=\"!size-5\" />\n                <span className=\"text-base font-semibold\">AMUcontainers</span>\n              </a>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarHeader>\n      <SidebarContent>\n        <NavMain items={data.navMain} />\n      </SidebarContent>\n      <SidebarFooter>\n        {!isLoading && <NavUser user={userData} />}\n      </SidebarFooter>\n    </Sidebar>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/app/dashboard/components/job-card.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":192,"column":34,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7169,7182],"text":"Statusssss: &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7169,7182],"text":"Statusssss: &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7169,7182],"text":"Statusssss: &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7169,7182],"text":"Statusssss: &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":192,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7200,7205],"text":"&quot; / \""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7200,7205],"text":"&ldquo; / \""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7200,7205],"text":"&#34; / \""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7200,7205],"text":"&rdquo; / \""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":192,"column":57,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7200,7205],"text":"\" / &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7200,7205],"text":"\" / &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7200,7205],"text":"\" / &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7200,7205],"text":"\" / &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":192,"column":72,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7219,7221],"text":"&quot; "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7219,7221],"text":"&ldquo; "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7219,7221],"text":"&#34; "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7219,7221],"text":"&rdquo; "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":192,"column":136,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7272,7318],"text":". Musi być &quot;RUNNING\" aby uruchomić Code Server"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7272,7318],"text":". Musi być &ldquo;RUNNING\" aby uruchomić Code Server"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7272,7318],"text":". Musi być &#34;RUNNING\" aby uruchomić Code Server"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7272,7318],"text":". Musi być &rdquo;RUNNING\" aby uruchomić Code Server"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":192,"column":144,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7272,7318],"text":". Musi być \"RUNNING&quot; aby uruchomić Code Server"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7272,7318],"text":". Musi być \"RUNNING&ldquo; aby uruchomić Code Server"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7272,7318],"text":". Musi być \"RUNNING&#34; aby uruchomić Code Server"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7272,7318],"text":". Musi być \"RUNNING&rdquo; aby uruchomić Code Server"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Code2, Loader2 } from \"lucide-react\";\nimport { Job } from \"../../../../lib/types\";\nimport { LiveTimer } from \"./live-timer\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\ninterface TunnelData {\n  id: number;\n  local_port: number;\n  remote_port: number;\n  remote_host: string;\n  status: string;\n  created_at: string;\n}\n\ninterface ActiveJobData {\n  job_id: string;\n  name: string;\n  state: string;\n  node: string;\n  node_count: number;\n  time_left: string;\n  time_used?: string;\n  memory_requested?: string;\n  memory?: string;\n  start_time?: string;\n  submit_time?: string;\n}\n\ninterface JobCardProps {\n  job: Job;\n  activeJobData?: ActiveJobData;\n  tunnels: TunnelData[];\n  isProcessing: boolean;\n  canUseCodeServer: boolean;\n  onDelete: () => void;\n  onOpenCodeServer: () => void;\n  formatDate: (date: string) => string;\n}\n\nexport const JobCard = React.memo(({\n  job,\n  activeJobData,\n  tunnels,\n  isProcessing,\n  canUseCodeServer,\n  onDelete,\n  onOpenCodeServer,\n  formatDate\n}: JobCardProps) => {\n  return (\n    <Card key={job.id}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">\n          {job.job_name}\n        </CardTitle>\n        <Badge variant={job.status === \"RUNNING\" ? \"default\" : \"secondary\"}>\n          {job.status}\n        </Badge>\n      </CardHeader>\n      <CardContent>\n        {/* Card content with job details */}\n        <div className=\"text-xs text-muted-foreground space-y-1\">\n          <div className=\"grid grid-cols-2 gap-1\">\n            <p><span className=\"font-medium\">ID:</span> {job.id}</p>\n            <p><span className=\"font-medium\">SLURM ID:</span> {job.job_id}</p>\n            <p><span className=\"font-medium\">Partycja:</span> {job.partition}</p>\n            <p><span className=\"font-medium\">Szablon:</span> {job.template_name}</p>\n          </div>\n          \n          {/* Resource allocation */}\n          <div className=\"mt-2 p-2 bg-muted/50 rounded-md\">\n            <h4 className=\"font-medium mb-1\">Zasoby:</h4>\n            <div className=\"grid grid-cols-2 gap-1\">\n              <p><span className=\"font-medium\">CPU:</span> {job.num_cpus}</p>\n              <p><span className=\"font-medium\">Pamięć:</span> {job.memory_gb}GB</p>\n              <p><span className=\"font-medium\">GPU:</span> {job.num_gpus}</p>\n              {job.node && <p><span className=\"font-medium\">Węzeł:</span> {job.node}</p>}\n            </div>\n          </div>\n          \n          {/* Timing information - only show for running jobs */}\n          {job.status === \"RUNNING\" && activeJobData && (\n            <div className=\"mt-2 p-2 bg-muted/50 rounded-md\">\n              <h4 className=\"font-medium mb-1\">Czas:</h4>\n              <div className=\"space-y-1\">\n                {activeJobData.time_left && (\n                  <p>\n                    <span className=\"font-medium\">Pozostało:</span>{\" \"}\n                    <LiveTimer initialTime={activeJobData.time_left} />\n                  </p>\n                )}\n                \n                {activeJobData.time_used && (\n                  <p>\n                    <span className=\"font-medium\">Czas użyty:</span>{\" \"}\n                    <span className=\"font-mono\">{activeJobData.time_used}</span>\n                  </p>\n                )}\n                \n                {activeJobData.start_time && (\n                  <p>\n                    <span className=\"font-medium\">Start:</span>{\" \"}\n                    {formatDate(activeJobData.start_time)}\n                  </p>\n                )}\n                \n                {activeJobData.submit_time && (\n                  <p>\n                    <span className=\"font-medium\">Zgłoszenie:</span>{\" \"}\n                    {formatDate(activeJobData.submit_time)}\n                  </p>\n                )}\n              </div>\n            </div>\n          )}\n          \n          {job.port && <p><span className=\"font-medium\">Port aplikacji:</span> {job.port}</p>}\n          \n          {/* Enhanced tunnel information */}\n          {tunnels.length > 0 && (\n            <div className=\"mt-2 p-2 bg-muted rounded-md\">\n              <p className=\"font-medium mb-1\">Tunel SSH:</p>\n              {tunnels.map((tunnel) => (\n                <div key={tunnel.id} className=\"space-y-1\">\n                  <p className=\"flex items-center\">\n                    <span className={`h-2 w-2 rounded-full mr-2 ${\n                      tunnel.status === 'ACTIVE' ? 'bg-green-500' : \n                      tunnel.status === 'DEAD' ? 'bg-red-500' : 'bg-gray-500'\n                    }`}/>\n                    <span>{tunnel.status === 'ACTIVE' ? 'Aktywny' : \n                           tunnel.status === 'DEAD' ? 'Nieaktywny' : 'Łączenie...'}</span>\n                  </p>\n                  <div className=\"text-xs border-l-2 border-muted-foreground/20 pl-2 mt-1 space-y-1\">\n                    <p className=\"font-medium\">Przekierowanie portów:</p>\n                    <p title=\"Port dostępny w przeglądarce i z zewnątrz kontenera\">\n                      Port zewnętrzny: <span className=\"font-mono bg-background px-1 rounded\">{tunnel.local_port}</span>\n                    </p>\n                    <p title=\"Port wewnętrzny tunelu SSH w kontenerze\">\n                      Port wewnętrzny: <span className=\"font-mono bg-background px-1 rounded\">{tunnel.remote_port}</span>\n                    </p>\n                    <p>\n                      Host: <span className=\"font-mono\">{tunnel.remote_host}</span>\n                    </p>\n                    <p className=\"text-[10px] text-muted-foreground mt-1\">\n                      <span className=\"font-medium\">Schemat:</span> 0.0.0.0:{tunnel.local_port} → 127.0.0.1:wewnętrzny → {tunnel.remote_host}:{tunnel.remote_port}\n                    </p>\n                  </div>\n                  <p className=\"text-xs\">Utworzony: {new Date(tunnel.created_at).toLocaleString()}</p>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n        \n        {/* Code Server button */}\n        <div className=\"mt-4 flex justify-end space-x-2\">\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <span className=\"inline-block\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={onOpenCodeServer}\n                    disabled={!canUseCodeServer || isProcessing}\n                  >\n                    {isProcessing ? (\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    ) : (\n                      <Code2 className=\"h-4 w-4 mr-2\" />\n                    )}\n                    Code Server\n                  </Button>\n                </span>\n              </TooltipTrigger>\n              <TooltipContent>\n                {!canUseCodeServer ? (\n                  <p>Statusssss: \"{canUseCodeServer}\" / \"{isProcessing}\" <span className=\"font-semibold\">{job.status}</span>. Musi być \"RUNNING\" aby uruchomić Code Server</p>\n                ) : (\n                  <p>Otwórz interfejs Code Server w nowej karcie</p>\n                )}\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n          \n          <Button \n            variant=\"destructive\" \n            size=\"sm\"\n            onClick={onDelete}\n            disabled={isProcessing}\n          >\n            {isProcessing ? (\n              <Loader2 className=\"h-4 w-4 animate-spin mr-1\" />\n            ) : null}\n            Usuń\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n});\n\nJobCard.displayName = \"JobCard\";\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/app/dashboard/components/nav-main.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[300,303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[300,303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { usePathname } from \"next/navigation\"\nimport Link from \"next/link\"\n\nimport {\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarMenu,\n  SidebarMenuItem,\n  SidebarMenuButton,\n} from \"@/registry/new-york-v4/ui/sidebar\"\n\ninterface NavItemProps {\n  title: string\n  url: string\n  icon: any\n  isActive?: boolean\n}\n\nexport function NavMain({\n  items,\n  className,\n}: {\n  items: NavItemProps[]\n  className?: string\n}) {\n  const pathname = usePathname()\n\n  return (\n    <SidebarGroup className={className}>\n      <SidebarGroupContent>\n        <SidebarMenu>\n          {items.map((item) => {\n            const isActive = pathname === item.url || (item.url !== \"/dashboard\" && pathname.startsWith(item.url))\n            \n            return (\n              <SidebarMenuItem key={item.title}>\n                {/* Użycie komponentu Link do poprawnej nawigacji */}\n                <Link href={item.url} className=\"block w-full\">\n                  <SidebarMenuButton isActive={isActive}>\n                    {item.icon && <item.icon />}\n                    {item.title}\n                  </SidebarMenuButton>\n                </Link>\n              </SidebarMenuItem>\n            )\n          })}\n        </SidebarMenu>\n      </SidebarGroupContent>\n    </SidebarGroup>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/app/dashboard/components/site-header.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ThemeSelector' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from \"@/registry/new-york-v4/ui/button\"\nimport { Separator } from \"@/registry/new-york-v4/ui/separator\"\nimport { SidebarTrigger } from \"@/registry/new-york-v4/ui/sidebar\"\nimport { ModeToggle } from \"@/app/dashboard/components/mode-toggle\"\nimport { ThemeSelector } from \"@/app/dashboard/components/theme-selector\"\n\nexport function SiteHeader() {\n  return (\n    <header className=\"flex h-(--header-height) shrink-0 items-center gap-2 border-b transition-[width,height] ease-linear group-has-data-[collapsible=icon]/sidebar-wrapper:h-(--header-height)\">\n      <div className=\"flex w-full items-center gap-1 px-4 lg:gap-2 lg:px-6\">\n        <SidebarTrigger className=\"-ml-1\" />\n        <Separator\n          orientation=\"vertical\"\n          className=\"mx-2 data-[orientation=vertical]:h-4\"\n        />\n        <h1 className=\"text-base font-medium\">PCSS containers v 0.2</h1>\n        <div className=\"ml-auto flex items-center gap-2\">\n          <ModeToggle />\n          {/* <ThemeSelector /> */}\n        </div>\n      </div>\n    </header>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/app/dashboard/components/skeleton.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":4,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":4,"endColumn":24,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[65,136],"text":"type SkeletonProps = React.HTMLAttributes<HTMLDivElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function Skeleton({ className, ...props }: SkeletonProps) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/app/dashboard/jobs/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1642,1645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1642,1645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","line":71,"column":6,"nodeType":"ArrayExpression","endLine":71,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: [fetchData, jobId]","fix":{"range":[2077,2084],"text":"[fetchData, jobId]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3707,3710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3707,3710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":149,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4239,4242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4239,4242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4798,4801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4798,4801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5262,5265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5262,5265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":236,"column":54,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6835,6890],"text":"\n                  Czy na pewno chcesz usunąć zadanie &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6835,6890],"text":"\n                  Czy na pewno chcesz usunąć zadanie &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6835,6890],"text":"\n                  Czy na pewno chcesz usunąć zadanie &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6835,6890],"text":"\n                  Czy na pewno chcesz usunąć zadanie &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":236,"column":69,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[6904,6974],"text":"&quot;? \n                  Ta operacja jest nieodwracalna.\n                "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[6904,6974],"text":"&ldquo;? \n                  Ta operacja jest nieodwracalna.\n                "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[6904,6974],"text":"&#34;? \n                  Ta operacja jest nieodwracalna.\n                "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[6904,6974],"text":"&rdquo;? \n                  Ta operacja jest nieodwracalna.\n                "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":541,"column":29,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[20962,21065],"text":"\n                    Kliknij &quot;Generuj URL\", aby utworzyć bezpieczny adres dostępowy.\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[20962,21065],"text":"\n                    Kliknij &ldquo;Generuj URL\", aby utworzyć bezpieczny adres dostępowy.\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[20962,21065],"text":"\n                    Kliknij &#34;Generuj URL\", aby utworzyć bezpieczny adres dostępowy.\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[20962,21065],"text":"\n                    Kliknij &rdquo;Generuj URL\", aby utworzyć bezpieczny adres dostępowy.\n                  "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":541,"column":41,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[20962,21065],"text":"\n                    Kliknij \"Generuj URL&quot;, aby utworzyć bezpieczny adres dostępowy.\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[20962,21065],"text":"\n                    Kliknij \"Generuj URL&ldquo;, aby utworzyć bezpieczny adres dostępowy.\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[20962,21065],"text":"\n                    Kliknij \"Generuj URL&#34;, aby utworzyć bezpieczny adres dostępowy.\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[20962,21065],"text":"\n                    Kliknij \"Generuj URL&rdquo;, aby utworzyć bezpieczny adres dostępowy.\n                  "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { toast } from \"sonner\";\nimport { RefreshCcw, ArrowLeft, Link2, ExternalLink } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from \"@/components/ui/dialog\";\nimport { jobsApi } from \"@/lib/api-client\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface JobDetails {\n  id: number;\n  job_id: string;\n  job_name: string;\n  status: string;\n  created_at: string;\n  updated_at: string | null;\n  template_name: string;\n  num_cpus: number;\n  memory_gb: number;\n  num_gpus: number;\n  time_limit: string;\n  node?: string;\n  port?: number;\n  owner_id: number;\n  partition: string;\n}\n\ninterface SSHTunnel {\n  id: number;\n  job_id: number;\n  local_port: number;\n  remote_port: number;\n  remote_host: string;\n  status: string;\n  created_at: string;\n}\n\ninterface TunnelStatus {\n  status: string;\n  message: string;\n  tunnel?: {\n    id: number;\n    port: number;\n    remote_port: number;\n    remote_host: string;\n    status: string;\n    created_at: string;\n    internal_accessible: boolean;\n    external_accessible: boolean;\n  }\n}\n\nexport default function JobDetailPage({ params }: { params: { id: string } }) {\n  const router = useRouter();\n  const jobId = parseInt(params.id);\n  \n  const [job, setJob] = useState<JobDetails | null>(null);\n  const [jobStatus, setJobStatus] = useState<any | null>(null);\n  const [tunnels, setTunnels] = useState<SSHTunnel[]>([]);\n  const [tunnelStatus, setTunnelStatus] = useState<TunnelStatus | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [codeServerURL, setCodeServerURL] = useState<string | null>(null);\n\n  // Pobierz szczegóły zadania i aktualne tunele SSH\n  useEffect(() => {\n    fetchData();\n  }, [jobId]);\n\n  const fetchData = async () => {\n    setIsLoading(true);\n    try {\n      // Pobierz szczegóły zadania\n      const jobResponse = await jobsApi.getJob(jobId);\n      setJob(jobResponse.data);\n      \n      // Pobierz aktualny status\n      const statusResponse = await jobsApi.getJobStatus(jobId);\n      setJobStatus(statusResponse.data);\n      \n      // Pobierz tunele SSH\n      try {\n        const tunnelsResponse = await jobsApi.getJobTunnels(jobId);\n        setTunnels(tunnelsResponse.data);\n\n        // Jeśli istnieją tunele, sprawdź ich status\n        if (tunnelsResponse.data.length > 0) {\n          try {\n            const tunnelStatusResponse = await jobsApi.checkTunnelStatus(jobId);\n            setTunnelStatus(tunnelStatusResponse.data);\n          } catch (error) {\n            console.error(\"Błąd podczas sprawdzania statusu tunelu:\", error);\n          }\n        }\n      } catch (error) {\n        console.error(\"Błąd podczas pobierania tuneli SSH:\", error);\n        setTunnels([]);\n      }\n    } catch (error) {\n      toast.error(\"Nie udało się pobrać szczegółów zadania\");\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Odśwież dane\n  const refreshData = () => {\n    fetchData();\n    toast.success(\"Dane zostały odświeżone\", {\n      duration: 3000,\n      closeButton: true\n    });\n  };\n\n  // Utwórz tunel SSH\n  const createTunnel = async () => {\n    try {\n      await jobsApi.createJobTunnel(jobId);\n      toast.success(\"Tunel SSH został utworzony\", {\n        duration: 5000,\n        closeButton: true\n      });\n      fetchData();  // Odśwież dane\n    } catch (error: any) {\n      toast.error(\n        error.response?.data?.detail || \"Nie udało się utworzyć tunelu SSH\",\n        {\n          duration: 5000,\n          closeButton: true\n        }\n      );\n      console.error(error);\n    }\n  };\n\n  // Zamknij tunel SSH\n  const closeTunnel = async (tunnelId: number) => {\n    try {\n      await jobsApi.closeJobTunnel(jobId, tunnelId);\n      toast.success(\"Tunel SSH został zamknięty\", {\n        duration: 5000,\n        closeButton: true\n      });\n      fetchData();  // Odśwież dane\n    } catch (error: any) {\n      toast.error(\n        error.response?.data?.detail || \"Nie udało się zamknąć tunelu SSH\",\n        {\n          duration: 5000,\n          closeButton: true\n        }\n      );\n      console.error(error);\n    }\n  };\n\n  // Pobierz URL do Code Server\n  const getCodeServerURL = async () => {\n    try {\n      const response = await jobsApi.getCodeServerUrl(jobId);\n      setCodeServerURL(response.data.url);\n      toast.success(\"Adres do Code Server został wygenerowany\", {\n        duration: 5000,\n        closeButton: true\n      });\n    } catch (error: any) {\n      toast.error(\n        error.response?.data?.detail || \"Nie udało się uzyskać dostępu do Code Server\",\n        {\n          duration: 5000,\n          closeButton: true\n        }\n      );\n      console.error(error);\n    }\n  };\n\n  // Usuń zadanie\n  const deleteJob = async () => {\n    setIsDeleting(true);\n    try {\n      await jobsApi.deleteJob(jobId);\n      toast.success(\"Zadanie zostało usunięte\");\n      router.push(\"/dashboard\");\n    } catch (error: any) {\n      toast.error(\n        error.response?.data?.detail || \"Nie udało się usunąć zadania\"\n      );\n      console.error(error);\n    } finally {\n      setIsDeleting(false);\n    }\n  };\n\n  // Format daty\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  if (isLoading) {\n    return <div className=\"flex justify-center items-center h-[50vh]\">Ładowanie szczegółów zadania...</div>;\n  }\n\n  if (!job) {\n    return <div className=\"flex justify-center items-center h-[50vh]\">Nie znaleziono zadania</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" size=\"icon\" onClick={() => router.push(\"/dashboard\")}>\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <h1 className=\"text-3xl font-bold\">Szczegóły zadania: {job.job_name}</h1>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={refreshData} variant=\"outline\" size=\"sm\">\n            <RefreshCcw className=\"h-4 w-4 mr-2\" />\n            Odśwież\n          </Button>\n          <Dialog>\n            <DialogTrigger asChild>\n              <Button variant=\"destructive\" size=\"sm\" disabled={isDeleting}>\n                {isDeleting ? \"Usuwanie...\" : \"Usuń zadanie\"}\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Potwierdzenie usunięcia</DialogTitle>\n                <DialogDescription>\n                  Czy na pewno chcesz usunąć zadanie \"{job.job_name}\"? \n                  Ta operacja jest nieodwracalna.\n                </DialogDescription>\n              </DialogHeader>\n              <DialogFooter>\n                <DialogClose asChild>\n                  <Button variant=\"outline\">Anuluj</Button>\n                </DialogClose>\n                <Button variant=\"destructive\" onClick={deleteJob}>\n                  Usuń zadanie\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Podstawowe informacje */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Informacje podstawowe</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">ID zadania:</span>\n              <span>{job.job_id}</span>\n            </div>\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">Nazwa:</span>\n              <span>{job.job_name}</span>\n            </div>\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">Status:</span>\n              <span className={`px-2 py-1 text-xs rounded-full inline-flex items-center \n                ${jobStatus?.status === 'RUNNING' ? 'bg-green-100 text-green-700' : \n                jobStatus?.status === 'PENDING' ? 'bg-yellow-100 text-yellow-700' : \n                jobStatus?.status === 'COMPLETED' ? 'bg-blue-100 text-blue-700' : \n                'bg-gray-100 text-gray-700'}`}>\n                {jobStatus?.status}\n              </span>\n            </div>\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">Szablon:</span>\n              <span>{job.template_name}</span>\n            </div>\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">Data utworzenia:</span>\n              <span>{formatDate(job.created_at)}</span>\n            </div>\n            {job.updated_at && (\n              <div className=\"flex justify-between py-1\">\n                <span className=\"font-medium\">Ostatnia aktualizacja:</span>\n                <span>{formatDate(job.updated_at)}</span>\n              </div>\n            )}\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">Partycja:</span>\n              <span>{job.partition}</span>\n            </div>\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">Wykonywane na węźle:</span>\n              <span>{jobStatus?.node || 'Nie przypisano'}</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Zasoby */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Zasoby</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">CPU:</span>\n              <span>{job.num_cpus}</span>\n            </div>\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">Pamięć RAM:</span>\n              <span>{job.memory_gb} GB</span>\n            </div>\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">GPU:</span>\n              <span>{job.num_gpus}</span>\n            </div>\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">Limit czasu:</span>\n              <span>{job.time_limit}</span>\n            </div>\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">Port:</span>\n              <span>{job.port || 'Brak'}</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tunele SSH */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <div>\n            <CardTitle>Tunele SSH i przekierowania portów</CardTitle>\n            <CardDescription>\n              Zarządzaj tunelami SSH i przekierowaniami portów do połączenia z kontenerem\n            </CardDescription>\n          </div>\n          <Button \n            onClick={createTunnel} \n            disabled={!jobStatus?.node || jobStatus?.status !== 'RUNNING'}\n          >\n            <Link2 className=\"h-4 w-4 mr-2\" />\n            Utwórz tunel\n          </Button>\n        </CardHeader>\n        <CardContent>\n          {tunnels.length === 0 ? (\n            <p className=\"text-muted-foreground\">\n              {!jobStatus?.node || jobStatus?.status !== 'RUNNING' \n                ? \"Tunele SSH są dostępne tylko dla zadań w stanie RUNNING i przypisanych do węzła.\" \n                : \"Brak aktywnych tuneli SSH. Kliknij 'Utwórz tunel', aby połączyć się z kontenerem.\"}\n            </p>\n          ) : (\n            <div>\n              {tunnelStatus && (\n                <div className=\"mb-4 p-4 rounded-md bg-muted\">\n                  <h4 className=\"font-medium mb-2\">Status tunelu</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <span>Stan:</span>\n                      <Badge variant={tunnelStatus.status === 'ACTIVE' ? 'success' : 'destructive'}>\n                        {tunnelStatus.status === 'ACTIVE' ? 'Aktywny' : 'Nieaktywny'}\n                      </Badge>\n                    </div>\n                    <div>\n                      <span>Komunikat: {tunnelStatus.message}</span>\n                    </div>\n                    {tunnelStatus.tunnel && (\n                      <>\n                        <div className=\"flex items-center gap-2\">\n                          <span>Dostępny w kontenerze:</span>\n                          <Badge variant={tunnelStatus.tunnel.internal_accessible ? 'success' : 'destructive'}>\n                            {tunnelStatus.tunnel.internal_accessible ? 'Tak' : 'Nie'}\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <span>Dostępny na zewnątrz kontenera:</span>\n                          <Badge variant={tunnelStatus.tunnel.external_accessible ? 'success' : 'destructive'}>\n                            {tunnelStatus.tunnel.external_accessible ? 'Tak' : 'Nie'}\n                          </Badge>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full border-collapse\">\n                  <thead>\n                    <tr className=\"border-b\">\n                      <th className=\"text-left py-2\">ID</th>\n                      <th className=\"text-left py-2\">Port zewnętrzny</th>\n                      <th className=\"text-left py-2\">Port wewnętrzny</th>\n                      <th className=\"text-left py-2\">Host zdalny</th>\n                      <th className=\"text-left py-2\">Status</th>\n                      <th className=\"text-left py-2\">Utworzono</th>\n                      <th className=\"text-left py-2\">Akcje</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {tunnels.map((tunnel) => (\n                      <tr key={tunnel.id} className=\"border-b hover:bg-muted/50\">\n                        <td className=\"py-2\">{tunnel.id}</td>\n                        <td className=\"py-2\">\n                          <span className=\"font-mono bg-muted px-1 py-0.5 rounded\" \n                                title=\"Port dostępny w przeglądarce i z zewnątrz kontenera\">\n                            {tunnel.local_port}\n                          </span>\n                        </td>\n                        <td className=\"py-2\">\n                          <span className=\"font-mono bg-muted px-1 py-0.5 rounded\" \n                                title=\"Port wewnętrzny tunelu SSH w kontenerze\">\n                            {tunnel.remote_port}\n                          </span>\n                        </td>\n                        <td className=\"py-2\">{tunnel.remote_host}</td>\n                        <td className=\"py-2\">\n                          <span className={`inline-block px-2 py-1 text-xs rounded-full \n                            ${tunnel.status === 'ACTIVE' ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>\n                            {tunnel.status}\n                          </span>\n                        </td>\n                        <td className=\"py-2\">{formatDate(tunnel.created_at)}</td>\n                        <td className=\"py-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            onClick={() => closeTunnel(tunnel.id)}\n                          >\n                            Zamknij\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n              \n              {/* Diagram wizualizujący przekierowanie portów */}\n              <div className=\"mt-4 p-4 bg-muted/30 rounded-md\">\n                <h4 className=\"font-medium mb-2\">Schemat przekierowania portów</h4>\n                <div className=\"relative p-4 flex justify-center items-center\">\n                  {/* Tworzenie wizualizacji przekierowania portów */}\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"border rounded-md px-3 py-2 bg-card\">\n                      <div className=\"text-xs font-medium\">Zewnętrzny świat</div>\n                      <div className=\"text-xs mt-1\">0.0.0.0:{tunnels[0]?.local_port}</div>\n                    </div>\n                    \n                    <div className=\"text-muted-foreground\">→</div>\n                    \n                    <div className=\"border rounded-md px-3 py-2 bg-card\">\n                      <div className=\"text-xs font-medium\">Docker (socat)</div>\n                      <div className=\"text-xs mt-1\">Port: {tunnels[0]?.local_port}</div>\n                    </div>\n                    \n                    <div className=\"text-muted-foreground\">→</div>\n                    \n                    <div className=\"border rounded-md px-3 py-2 bg-card\">\n                      <div className=\"text-xs font-medium\">Tunel SSH</div>\n                      <div className=\"text-xs mt-1\">127.0.0.1:wewnętrzny</div>\n                    </div>\n                    \n                    <div className=\"text-muted-foreground\">→</div>\n                    \n                    <div className=\"border rounded-md px-3 py-2 bg-card\">\n                      <div className=\"text-xs font-medium\">Klaster SLURM</div>\n                      <div className=\"text-xs mt-1\">{tunnels[0]?.remote_host}:{tunnels[0]?.remote_port}</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n        <CardFooter className=\"flex flex-col items-start space-y-2\">\n          <p className=\"text-xs text-muted-foreground\">\n            Tunele SSH umożliwiają bezpieczne połączenie z usługami uruchomionymi w kontenerze poprzez przekierowanie portów.\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            <span className=\"font-medium\">Technologia:</span> Użyto kombinacji tunelowania SSH oraz narzędzia socat do przekierowania portów na zewnątrz kontenera.\n          </p>\n        </CardFooter>\n      </Card>\n\n      {/* Dostęp do kontenera */}\n      {jobStatus?.status === 'RUNNING' && jobStatus?.node && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Dostęp do kontenera</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p>\n              Kontener jest uruchomiony i dostępny na węźle <strong>{jobStatus.node}</strong>.\n              Możesz połączyć się z interfejsem webowym kontenera:\n            </p>\n            \n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"bg-muted p-4 rounded-md flex-1\">\n                <p className=\"font-medium mb-2\">Bezpośredni dostęp przez tunel:</p>\n                <p className=\"mt-2\">\n                  URL: <code className=\"bg-background p-1 rounded\">http://localhost:{tunnels.length > 0 ? tunnels[0].local_port : job.port}</code>\n                </p>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Wymaga aktywnego tunelu SSH.\n                </p>\n              </div>\n              \n              <div className=\"bg-muted p-4 rounded-md flex-1\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <p className=\"font-medium\">Dostęp przez subdomenę (Caddy):</p>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    disabled={tunnels.length === 0 || !tunnelStatus?.tunnel?.internal_accessible}\n                    onClick={getCodeServerURL}\n                  >\n                    <ExternalLink className=\"h-4 w-4 mr-2\" />\n                    Generuj URL\n                  </Button>\n                </div>\n                \n                {codeServerURL ? (\n                  <div className=\"mt-2\">\n                    <p>\n                      URL: <a href={codeServerURL} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 hover:underline\">\n                        {codeServerURL}\n                      </a>\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Bezpieczny dostęp przez HTTPS z automatycznym certyfikatem.\n                    </p>\n                  </div>\n                ) : (\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Kliknij \"Generuj URL\", aby utworzyć bezpieczny adres dostępowy.\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"bg-muted p-4 rounded-md\">\n              <p className=\"font-medium mb-2\">Jak to działa:</p>\n              <ol className=\"list-decimal list-inside text-sm space-y-1\">\n                <li>SSH tworzy tunel do kontenera na klastrze SLURM</li>\n                <li>Socat przekierowuje połączenia z portu zewnętrznego do lokalnego tunelu SSH</li>\n                <li>Caddy tworzy bezpieczny endpoint z certyfikatem SSL</li>\n              </ol>\n            </div>\n          </CardContent>\n          <CardFooter>\n            <p className=\"text-xs text-muted-foreground\">\n              Upewnij się, że tunel SSH jest aktywny przed próbą połączenia.\n            </p>\n          </CardFooter>\n        </Card>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/app/dashboard/layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SidebarNav' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'authApi' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sidebarNavItems' is assigned a value but never used.","line":16,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'navItems' is assigned a value but never used.","line":36,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":49,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":15}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { SidebarNav } from \"@/components/dashboard/sidebar-nav\";\nimport { authApi } from \"@/lib/api-client\";\nimport {\n  SidebarInset,\n  SidebarProvider,\n} from \"@/registry/new-york-v4/ui/sidebar\";\nimport { AppSidebar } from \"@/app/dashboard/components/app-sidebar\";\nimport { SiteHeader } from \"@/app/dashboard/components/site-header\";\nimport { LayoutDashboard, Plus, ListChecks, Settings } from \"lucide-react\";\n\nconst sidebarNavItems = [\n  {\n    title: \"Moje kontenery\",\n    href: \"/dashboard\",\n  },\n  {\n    title: \"Nowy kontener\",\n    href: \"/dashboard/submit-job\",\n  },\n  {\n    title: \"Kolejka zadań\",\n    href: \"/dashboard/task_queue\",\n  },\n  {\n    title: \"Ustawienia\",\n    href: \"/dashboard/settings\",\n  },\n];\n\n// Update the navigation items array to include both Task Queue and Jobs Queue\nconst navItems = [\n  { href: \"/dashboard\", label: \"Przegląd\", icon: LayoutDashboard },\n  { href: \"/dashboard/submit-job\", label: \"Nowy kontener\", icon: Plus },\n  { href: \"/dashboard/task_queue\", label: \"Kolejka zadań\", icon: ListChecks },\n  // We'll keep the task_queue page for development but not show it in the menu yet\n  { href: \"/dashboard/settings\", label: \"Ustawienia\", icon: Settings },\n];\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  const router = useRouter();\n\n  // Sprawdź token przy każdym renderowaniu layoutu\n  useEffect(() => {\n    const token = localStorage.getItem(\"auth_token\");\n    if (!token) {\n      // Jeśli nie ma tokenu, przekieruj na stronę logowania\n      window.location.href = \"/login\";\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"flex flex-1 flex-col\">\n        <SidebarProvider\n          style={\n            {\n              \"--sidebar-width\": \"calc(var(--spacing) * 72)\",\n            } as React.CSSProperties\n          }\n        >\n          <AppSidebar variant=\"inset\" />\n          <SidebarInset>\n            <SiteHeader />\n            <div className=\"flex flex-1 flex-col\">\n              <div className=\"space-y-6 p-10 pb-16\">\n                <div className=\"space-y-0.5\">\n                  <h2 className=\"text-2xl font-bold tracking-tight\">Dashboard</h2>\n                  <p className=\"text-muted-foreground\">\n                    Zarządzaj swoimi kontenerami obliczeniowymi\n                  </p>\n                </div>\n                <Separator className=\"my-6\" />\n                <div className=\"flex flex-col space-y-8 lg:flex-row lg:space-x-12 lg:space-y-0\">\n                  <div className=\"flex-1\">{children}</div>\n                </div>\n              </div>\n            </div>\n          </SidebarInset>\n        </SidebarProvider>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/app/dashboard/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Code2' is defined but never used.","line":8,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TooltipContent' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TooltipProvider' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TooltipTrigger' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LiveTimer' is defined but never used.","line":20,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2837,2840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2837,2840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3379,3382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3379,3382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'errorMessage' is assigned a value but never used.","line":107,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4090,4093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4090,4093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'errorMessage' is assigned a value but never used.","line":125,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4708,4711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4708,4711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'refreshData'. Either include it or remove the dependency array.","line":212,"column":6,"nodeType":"ArrayExpression","endLine":212,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [autoRefreshEnabled, refreshData]","fix":{"range":[6933,6953],"text":"[autoRefreshEnabled, refreshData]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hasNode' is assigned a value but never used.","line":218,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":218,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":254,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8303,8306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8303,8306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":283,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9292,9295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9292,9295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { jobsApi } from \"@/lib/api-client\";\nimport { Plus, RefreshCcw, Code2, Settings, Loader2 } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { toast } from \"sonner\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Job } from \"../../../lib/types\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { JobCard } from \"./components/job-card\";\nimport { LiveTimer } from \"./components/live-timer\";\n\n// Define interface for tunnel data\ninterface TunnelData {\n  id: number;\n  local_port: number;\n  remote_port: number;\n  remote_host: string;\n  status: string;\n  created_at: string;\n}\n\n// Define interface for active job data\ninterface ActiveJobData {\n  job_id: string;\n  name: string;\n  state: string;\n  node: string;\n  node_count: number;\n  time_left: string;\n  time_used?: string;\n  memory_requested?: string;\n  memory?: string;\n  start_time?: string;\n  submit_time?: string;\n}\n\n// Format date string to more readable format\nconst formatDate = (dateString: string) => {\n  if (!dateString) return \"N/A\";\n  const date = new Date(dateString);\n  return date.toLocaleString();\n};\n\nexport default function DashboardPage() {\n  // Main state\n  const [jobs, setJobs] = useState<Job[]>([]);\n  const [activeJobs, setActiveJobs] = useState<ActiveJobData[]>([]);\n  \n  // Loading states\n  const [isJobsLoading, setIsJobsLoading] = useState(false);\n  const [isActiveJobsLoading, setIsActiveJobsLoading] = useState(false);\n  const [isClusterStatusLoading, setIsClusterStatusLoading] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  \n  // Operation states\n  const [processingJobs, setProcessingJobs] = useState<Record<number, boolean>>({});\n  \n  // Data states\n  const [clusterStatus, setClusterStatus] = useState<{connected: boolean, slurm_running: boolean} | null>(null);\n  const [jobTunnels, setJobTunnels] = useState<Record<number, TunnelData[]>>({});\n  const [autoRefreshEnabled, setAutoRefreshEnabled] = useState(true);\n\n  // Create a map of active jobs for efficient lookup\n  const activeJobsMap = useMemo(() => {\n    const map = new Map<string, ActiveJobData>();\n    activeJobs.forEach((job) => {\n      map.set(job.job_id, job);\n    });\n    return map;\n  }, [activeJobs]);\n\n  // Fetch jobs with better error handling\n  const fetchJobs = useCallback(async () => {\n    setIsJobsLoading(true);\n    try {\n      const response = await jobsApi.getJobs();\n      setJobs(response.data);\n      return response;\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.detail || \"Nie udało się pobrać listy zadań\";\n      toast.error(errorMessage);\n      console.error(\"Error fetching jobs:\", error);\n      throw error;\n    } finally {\n      setIsJobsLoading(false);\n    }\n  }, []);\n\n  // Fetch active jobs with error handling\n  const fetchActiveJobs = useCallback(async () => {\n    setIsActiveJobsLoading(true);\n    try {\n      const response = await jobsApi.getActiveJobs();\n      setActiveJobs(response.data);\n      return response;\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.detail || \"Nie udało się pobrać aktywnych zadań\";\n      console.error(\"Error fetching active jobs:\", error);\n      // Not showing toast to avoid overwhelming the user with multiple error messages\n      // during a single refresh operation - main error will come from refreshData\n      throw error;\n    } finally {\n      setIsActiveJobsLoading(false);\n    }\n  }, []);\n\n  // Check cluster status with error handling\n  const checkClusterStatus = useCallback(async () => {\n    setIsClusterStatusLoading(true);\n    try {\n      const response = await jobsApi.getClusterStatus();\n      setClusterStatus(response.data);\n      return response;\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.detail || \"Nie udało się sprawdzić statusu klastra\";\n      console.error(\"Error checking cluster status:\", error);\n      setClusterStatus({ connected: false, slurm_running: false });\n      throw error;\n    } finally {\n      setIsClusterStatusLoading(false);\n    }\n  }, []);\n\n  // Fetch tunnel information with improved error handling\nconst fetchTunnelInfo = useCallback(async (jobId: number) => {\n  try {\n    const response = await jobsApi.getJobTunnels(jobId);\n    setJobTunnels(prev => ({\n      ...prev,\n      [jobId]: response.data\n    }));\n  } catch (error: any) {\n    console.error(`Error fetching tunnel info for job ${jobId}:`, error); // Zachowaj ogólne logowanie\n\n    if (axios.isAxiosError(error)) {\n      if (error.response) {\n        // Serwer odpowiedział błędem\n        if (error.response.status === 500) {\n          toast.error(`Wystąpił wewnętrzny błąd serwera przy pobieraniu tuneli dla zadania ${jobId}. Prosimy spróbować później.`);\n          // Możesz też zapisać gdzieś, że dla tego joba nie udało się pobrać tuneli\n          // np. setJobTunnelsError(jobId, true);\n        } else {\n          // Inne błędy serwera (np. 400, 404)\n          const message = error.response.data?.detail || `Błąd serwera (${error.response.status}) przy pobieraniu tuneli.`;\n          toast.error(message);\n        }\n      } else if (error.request) {\n        toast.error(`Brak odpowiedzi od serwera przy próbie pobrania tuneli dla zadania ${jobId}.`);\n      } else {\n        toast.error(`Błąd konfiguracji żądania tuneli dla zadania ${jobId}.`);\n      }\n    } else {\n      toast.error(`Wystąpił nieoczekiwany błąd przy pobieraniu tuneli dla zadania ${jobId}.`);\n    }\n  }\n}, [/* zależności */]);\n\n  // Fetch all tunnel information for running jobs\n  const fetchAllTunnels = useCallback(() => {\n    jobs.forEach(job => {\n      if (job.status === \"RUNNING\" && job.node && job.port) {\n        fetchTunnelInfo(job.id);\n      }\n    });\n  }, [jobs, fetchTunnelInfo]);\n\n  // Initial data fetching\n  useEffect(() => {\n    const initialFetch = async () => {\n      try {\n        await Promise.all([\n          fetchJobs(),\n          fetchActiveJobs(),\n          checkClusterStatus()\n        ]);\n      } catch (error) {\n        console.error(\"Error during initial data fetch:\", error);\n      }\n    };\n    \n    initialFetch();\n  }, [fetchJobs, fetchActiveJobs, checkClusterStatus]);\n\n  // Fetch tunnels when jobs change\n  useEffect(() => {\n    fetchAllTunnels();\n  }, [fetchAllTunnels]);\n\n  // Auto-refresh timer\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout;\n\n    if (autoRefreshEnabled) {\n      intervalId = setInterval(() => {\n        refreshData(false); // Silent refresh (no toast)\n      }, 10000);\n    }\n\n    return () => {\n      if (intervalId) clearInterval(intervalId);\n    };\n  }, [autoRefreshEnabled]);\n\n  // Check if a job can use Code Server\n  const canUseCodeServer = useCallback((job: Job): boolean => {\n    // Strict check - job must be RUNNING and have node and port\n    const isRunning = job.status === \"RUNNING\";\n    const hasNode = !!job.node;\n    const hasPort = !!job.port;\n    \n    return isRunning && hasPort;\n  }, []);\n\n  // Refresh all data\n  const refreshData = useCallback(async (showToast = true) => {\n    setIsRefreshing(true);\n    \n    try {\n      await Promise.all([\n        fetchJobs(), \n        fetchActiveJobs(), \n        checkClusterStatus()\n      ]);\n      \n      if (showToast) toast.success(\"Dane zostały odświeżone\");\n    } catch (error) {\n      console.error(\"Error refreshing data:\", error);\n      if (showToast) toast.error(\"Błąd podczas odświeżania danych\");\n    } finally {\n      // No artificial delay - respond immediately to improve UX\n      setIsRefreshing(false);\n    }\n  }, [fetchJobs, fetchActiveJobs, checkClusterStatus]);\n\n  // Delete a job with loading state\n  const handleDelete = useCallback(async (jobId: number) => {\n    // Set processing state for this job\n    setProcessingJobs(prev => ({ ...prev, [jobId]: true }));\n    \n    try {\n      await jobsApi.deleteJob(jobId);\n      setJobs(prev => prev.filter(job => job.id !== jobId));\n      toast.success(\"Kontener został usunięty\");\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.detail || \"Nie udało się usunąć kontenera\";\n      toast.error(errorMessage);\n      console.error(`Error deleting job ${jobId}:`, error);\n    } finally {\n      // Clear processing state\n      setProcessingJobs(prev => ({ ...prev, [jobId]: false }));\n    }\n  }, []);\n\n  // Open Code Server with loading state\n  const openCodeServer = useCallback(async (job: Job) => {\n    // Set processing state for this job\n    setProcessingJobs(prev => ({ ...prev, [job.id]: true }));\n    \n    try {\n      const toastId = toast.loading(\"Establishing connection...\", {\n        closeButton: true\n      });\n      \n      const response = await jobsApi.getCodeServerUrl(job.id);\n      const { url } = response.data;\n      \n      window.open(url, '_blank');\n      toast.success(\"Code Server connection established. Opening in new tab...\", {\n        id: toastId,\n        duration: 5000, // 5 seconds\n        closeButton: true\n      });\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.detail || \"Could not open Code Server\";\n      console.log(error);\n      toast.error(errorMessage, {\n        duration: 5000,\n        closeButton: true\n      });\n      console.error(`Code Server error for job ${job.id}:`, error);\n    } finally {\n      // Clear processing state\n      setProcessingJobs(prev => ({ ...prev, [job.id]: false }));\n    }\n  }, []);\n\n  // Filter jobs based on status\n  const getActiveJobs = useCallback(() => {\n    return jobs.filter(job => job.status === \"RUNNING\" || job.status === \"PENDING\" || job.status === \"CONFIGURING\");\n  }, [jobs]);\n  \n  const getCompletedJobs = useCallback(() => {\n    return jobs.filter(job => job.status === \"COMPLETED\" || job.status === \"FAILED\" || job.status === \"CANCELLED\");\n  }, [jobs]);\n\n  // Determine if any data is loading\n  const isAnyLoading = isJobsLoading || isActiveJobsLoading || isClusterStatusLoading;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with title and action buttons */}\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold\">\n          Panel zarządzania zadaniami\n          {isAnyLoading && <span className=\"inline-block ml-2 align-middle\"><Loader2 className=\"h-5 w-5 animate-spin text-muted-foreground\" /></span>}\n        </h1>\n        <div className=\"flex gap-2 items-center\">\n          <Button \n            onClick={() => setAutoRefreshEnabled(!autoRefreshEnabled)} \n            variant={autoRefreshEnabled ? \"default\" : \"outline\"}\n            size=\"sm\"\n          >\n            Auto {autoRefreshEnabled ? \"Wł\" : \"Wył\"}\n          </Button>\n          <Button \n            onClick={() => refreshData(true)} \n            variant=\"outline\" \n            size=\"sm\" \n            disabled={isRefreshing || isAnyLoading}\n          >\n            <RefreshCcw className={`h-4 w-4 mr-2 ${isRefreshing ? \"animate-spin\" : \"\"}`} />\n            {isRefreshing ? \"Odświeżanie...\" : \"Odśwież\"}\n          </Button>\n          <Link href=\"/dashboard/submit-job\">\n            <Button size=\"sm\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nowe zadanie\n            </Button>\n          </Link>\n          <Link href=\"/dashboard/settings\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Settings className=\"h-4 w-4 mr-2\" />\n              Ustawienia\n            </Button>\n          </Link>\n        </div>\n      </div>\n\n      {/* Status klastra */}\n      <Card>\n        <CardHeader className=\"pb-2\">\n          <CardTitle>Status klastra</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isClusterStatusLoading && !clusterStatus ? (\n            <div className=\"flex items-center\">\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              <p>Sprawdzanie statusu klastra...</p>\n            </div>\n          ) : !clusterStatus ? (\n            <p className=\"text-amber-500\">Nie można uzyskać statusu klastra</p>\n          ) : (\n            <div className=\"flex gap-4\">\n              <div className=\"flex items-center\">\n                <div className={`h-3 w-3 rounded-full mr-2 ${clusterStatus.connected ? 'bg-green-500' : 'bg-red-500'}`}></div>\n                <p>Połączenie: {clusterStatus.connected ? 'Aktywne' : 'Nieaktywne'}</p>\n              </div>\n              <div className=\"flex items-center\">\n                <div className={`h-3 w-3 rounded-full mr-2 ${clusterStatus.slurm_running ? 'bg-green-500' : 'bg-red-500'}`}></div>\n                <p>SLURM: {clusterStatus.slurm_running ? 'Działa' : 'Nie działa'}</p>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Zadania */}\n      <Tabs defaultValue=\"all\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"all\">Aktywne zadania</TabsTrigger>\n          <TabsTrigger value=\"active\">Lista zadań</TabsTrigger>\n          <TabsTrigger value=\"completed\">Zadania zakończone</TabsTrigger>\n        </TabsList>\n        \n        {/* Active jobs tab (renamed from All jobs) */}\n        <TabsContent value=\"all\" className=\"mt-4\">\n          {isJobsLoading && jobs.length === 0 ? (\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {Array(3).fill(0).map((_, i) => (\n                <Card key={i} className=\"relative overflow-hidden\">\n                  <div className=\"animate-pulse bg-muted/50 absolute inset-0\" />\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <div className=\"h-5 w-32 bg-muted rounded\" />\n                    <div className=\"h-5 w-20 bg-muted rounded\" />\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"h-4 w-full bg-muted rounded\" />\n                      <div className=\"h-4 w-3/4 bg-muted rounded\" />\n                      <div className=\"h-20 w-full bg-muted rounded\" />\n                      <div className=\"h-8 w-full bg-muted rounded\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : getActiveJobs().length === 0 ? (\n            <div className=\"text-center py-10 text-muted-foreground\">\n              <p>Brak aktywnych zadań. Utwórz nowe zadanie, aby rozpocząć pracę.</p>\n            </div>\n          ) : (\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {getActiveJobs().map((job) => (\n                <JobCard \n                  key={job.id}\n                  job={job}\n                  activeJobData={activeJobsMap.get(job.job_id)}\n                  tunnels={jobTunnels[job.id] || []}\n                  isProcessing={processingJobs[job.id] || false}\n                  onDelete={() => handleDelete(job.id)}\n                  onOpenCodeServer={() => openCodeServer(job)}\n                  canUseCodeServer={canUseCodeServer(job)}\n                  formatDate={formatDate}\n                />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n        \n        {/* Active jobs tab */}\n        <TabsContent value=\"active\" className=\"mt-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle>Zadania aktywne</CardTitle>\n              <CardDescription>\n                Zadania aktualnie wykonywane lub oczekujące na klastrze\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isJobsLoading ? (\n                <div className=\"flex items-center justify-center py-6\">\n                  <Loader2 className=\"h-6 w-6 animate-spin mr-2\" />\n                  <p>Ładowanie zadań...</p>\n                </div>\n              ) : getActiveJobs().length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <p>Brak aktywnych zadań.</p>\n                </div>\n              ) : (\n                <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                  {getActiveJobs().map((job) => (\n                    <JobCard \n                      key={job.id}\n                      job={job}\n                      activeJobData={activeJobsMap.get(job.job_id)}\n                      tunnels={jobTunnels[job.id] || []}\n                      isProcessing={processingJobs[job.id] || false}\n                      onDelete={() => handleDelete(job.id)}\n                      onOpenCodeServer={() => openCodeServer(job)}\n                      canUseCodeServer={canUseCodeServer(job)}\n                      formatDate={formatDate}\n                    />\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        {/* Completed jobs tab */}\n        <TabsContent value=\"completed\" className=\"mt-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle>Zadania zakończone</CardTitle>\n              <CardDescription>\n                Zadania zakończone, anulowane lub zakończone błędem\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isJobsLoading ? (\n                <div className=\"flex items-center justify-center py-6\">\n                  <Loader2 className=\"h-6 w-6 animate-spin mr-2\" />\n                  <p>Ładowanie zadań...</p>\n                </div>\n              ) : getCompletedJobs().length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <p>Brak zakończonych zadań.</p>\n                </div>\n              ) : (\n                <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                  {getCompletedJobs().map((job) => (\n                    <JobCard \n                      key={job.id}\n                      job={job}\n                      activeJobData={activeJobsMap.get(job.job_id)}\n                      tunnels={jobTunnels[job.id] || []}\n                      isProcessing={processingJobs[job.id] || false}\n                      onDelete={() => handleDelete(job.id)}\n                      onOpenCodeServer={() => openCodeServer(job)}\n                      canUseCodeServer={canUseCodeServer(job)}\n                      formatDate={formatDate}\n                    />\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n      \n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/app/dashboard/settings/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CLITokenCreate' is defined but never used.","line":51,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3749,3752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3749,3752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchUserData'. Either include it or remove the dependency array.","line":142,"column":6,"nodeType":"ArrayExpression","endLine":142,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchUserData]","fix":{"range":[4614,4616],"text":"[fetchUserData]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":150,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4831,4834],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4831,4834],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5554,5557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5554,5557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6076,6079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6076,6079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":203,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6569,6572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6569,6572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'copyToClipboard' is assigned a value but never used.","line":211,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":211,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatDate' is assigned a value but never used.","line":222,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":222,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isTokenExpired' is assigned a value but never used.","line":227,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":227,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getDaysUntilExpiration' is assigned a value but never used.","line":232,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":232,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":273,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9024,9027],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9024,9027],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":329,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11042,11045],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11042,11045],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":356,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12006,12009],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12006,12009],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":405,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":405,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13958,13961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13958,13961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":468,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":468,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15884,15887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15884,15887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":1089,"column":65,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[43978,43994],"text":"Przedłuż token &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[43978,43994],"text":"Przedłuż token &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[43978,43994],"text":"Przedłuż token &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[43978,43994],"text":"Przedłuż token &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":1089,"column":78,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[44006,44007],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[44006,44007],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[44006,44007],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[44006,44007],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":1134,"column":70,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[46522,46593],"text":"\n                                    Czy na pewno chcesz usunąć token &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[46522,46593],"text":"\n                                    Czy na pewno chcesz usunąć token &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[46522,46593],"text":"\n                                    Czy na pewno chcesz usunąć token &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[46522,46593],"text":"\n                                    Czy na pewno chcesz usunąć token &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":1134,"column":83,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[46605,46754],"text":"&quot;? \n                                    Ta akcja nie może zostać cofnięta i uniemożliwi korzystanie z tego tokenu.\n                                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[46605,46754],"text":"&ldquo;? \n                                    Ta akcja nie może zostać cofnięta i uniemożliwi korzystanie z tego tokenu.\n                                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[46605,46754],"text":"&#34;? \n                                    Ta akcja nie może zostać cofnięta i uniemożliwi korzystanie z tego tokenu.\n                                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[46605,46754],"text":"&rdquo;? \n                                    Ta akcja nie może zostać cofnięta i uniemożliwi korzystanie z tego tokenu.\n                                  "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\nimport { toast } from \"sonner\"\nimport { Loader2, Eye, EyeOff, Save, User, Code, Key, RefreshCcw, Plus, Trash2, Copy, Calendar, Globe, Monitor } from \"lucide-react\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { userApi, cliTokensApi, CLIToken, CLITokenCreate } from \"@/lib/api-client\"\nimport { Skeleton } from \"@/app/dashboard/components/skeleton\"\n\n// Schema for CLI token creation\nconst cliTokenCreateSchema = z.object({\n  name: z.string()\n    .min(1, \"Nazwa tokenu jest wymagana\")\n    .max(100, \"Nazwa nie może przekraczać 100 znaków\"),\n  expires_days: z.number()\n    .min(1, \"Token musi być ważny co najmniej 1 dzień\")\n    .max(365, \"Token nie może być ważny dłużej niż 365 dni\")\n    .default(30),\n})\n\n// Schema for code server password\nconst codeServerSchema = z.object({\n  code_server_password: z.string()\n    .min(5, \"Hasło musi mieć minimum 5 znaków\")\n    .max(50, \"Hasło nie może przekraczać 50 znaków\"),\n})\n\n// Schema for user account data\nconst accountSchema = z.object({\n  email: z.string().email(\"Podaj poprawny adres email\"),\n  first_name: z.string().min(1, \"Imię jest wymagane\"),\n  last_name: z.string().min(1, \"Nazwisko jest wymagane\"),\n  password: z.string()\n    .min(8, \"Hasło musi mieć minimum 8 znaków\")\n    .optional()\n    .or(z.literal('')),\n  password_confirm: z.string().optional().or(z.literal('')),\n}).refine((data) => {\n  if (data.password && data.password !== data.password_confirm) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Hasła muszą być identyczne\",\n  path: [\"password_confirm\"],\n});\n\nexport default function SettingsPage() {\n  const [isInitialLoading, setIsInitialLoading] = useState(true) // For initial page load skeleton\n  const [isSubmittingAccount, setIsSubmittingAccount] = useState(false) // For account form submission\n  const [isSubmittingCodeServer, setIsSubmittingCodeServer] = useState(false) // For code-server form submission\n  const [showSuccessAccount, setShowSuccessAccount] = useState(false) // For success animation on account\n  const [showSuccessCodeServer, setShowSuccessCodeServer] = useState(false) // For success animation on code server\n  \n  // CLI Tokens states\n  const [cliTokens, setCliTokens] = useState<CLIToken[]>([])\n  const [isLoadingTokens, setIsLoadingTokens] = useState(false)\n  const [isCreatingToken, setIsCreatingToken] = useState(false)\n  const [showCreateTokenDialog, setShowCreateTokenDialog] = useState(false)\n  const [newTokenData, setNewTokenData] = useState<{ token: string; tokenInfo: CLIToken } | null>(null)\n  \n  const [showPassword, setShowPassword] = useState(false)\n  const [isEditingCodeServer, setIsEditingCodeServer] = useState(false) // Renamed for clarity\n  const [userData, setUserData] = useState<any>(null)\n  const [fetchError, setFetchError] = useState<string | null>(null)\n  \n  // Code Server form\n  const codeServerForm = useForm<z.infer<typeof codeServerSchema>>({\n    resolver: zodResolver(codeServerSchema),\n    defaultValues: { code_server_password: \"\" }\n  })\n  \n  // CLI Token creation form\n  const cliTokenForm = useForm<z.infer<typeof cliTokenCreateSchema>>({\n    resolver: zodResolver(cliTokenCreateSchema),\n    defaultValues: {\n      name: \"\",\n      expires_days: 30\n    }\n  })\n  \n  // Account form\n  const accountForm = useForm<z.infer<typeof accountSchema>>({\n    resolver: zodResolver(accountSchema),\n    defaultValues: {\n      email: \"\",\n      first_name: \"\",\n      last_name: \"\",\n      password: \"\",\n      password_confirm: \"\"\n    }\n  })\n\n  // Fetch user data on first render\n  useEffect(() => {\n    fetchUserData();\n    fetchCliTokens();\n  }, []);\n\n  // Fetch CLI tokens\n  const fetchCliTokens = async () => {\n    setIsLoadingTokens(true);\n    try {\n      const response = await cliTokensApi.getTokens();\n      setCliTokens(response.data);\n    } catch (error: any) {\n      console.error(\"Error fetching CLI tokens:\", error);\n      toast.error(\"Nie udało się pobrać listy tokenów CLI\");\n    } finally {\n      setIsLoadingTokens(false);\n    }\n  };\n\n  // Create new CLI token\n  const createCliToken = async (values: z.infer<typeof cliTokenCreateSchema>) => {\n    setIsCreatingToken(true);\n    try {\n      const response = await cliTokensApi.createToken(values);\n      setNewTokenData({\n        token: response.data.token,\n        tokenInfo: response.data.token_info\n      });\n      \n      // Refresh tokens list\n      await fetchCliTokens();\n      \n      // Reset form\n      cliTokenForm.reset();\n      \n      toast.success(\"Token CLI został pomyślnie utworzony!\");\n    } catch (error: any) {\n      console.error(\"Error creating CLI token:\", error);\n      const errorMessage = error.response?.data?.detail || \"Wystąpił błąd podczas tworzenia tokenu\";\n      toast.error(errorMessage);\n    } finally {\n      setIsCreatingToken(false);\n    }\n  };\n\n  // Delete CLI token\n  const deleteCliToken = async (tokenId: number, tokenName: string) => {\n    try {\n      await cliTokensApi.deleteToken(tokenId);\n      await fetchCliTokens();\n      toast.success(`Token \"${tokenName}\" został usunięty`);\n    } catch (error: any) {\n      console.error(\"Error deleting CLI token:\", error);\n      const errorMessage = error.response?.data?.detail || \"Wystąpił błąd podczas usuwania tokenu\";\n      toast.error(errorMessage);\n    }\n  };\n\n  // Extend CLI token\n  const extendCliToken = async (tokenId: number, days: number) => {\n    try {\n      await cliTokensApi.updateToken(tokenId, { expires_days: days });\n      await fetchCliTokens();\n      toast.success(`Token został przedłużony o ${days} dni`);\n    } catch (error: any) {\n      console.error(\"Error extending CLI token:\", error);\n      const errorMessage = error.response?.data?.detail || \"Wystąpił błąd podczas przedłużania tokenu\";\n      toast.error(errorMessage);\n    }\n  };\n\n  // Copy token to clipboard\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast.success(\"Token został skopiowany do schowka\");\n    } catch (error) {\n      console.error(\"Error copying to clipboard:\", error);\n      toast.error(\"Nie udało się skopiować tokenu\");\n    }\n  };\n\n  // Format date for display\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString('pl-PL');\n  };\n\n  // Check if token is expired\n  const isTokenExpired = (expiresAt: string) => {\n    return new Date(expiresAt) < new Date();\n  };\n\n  // Get days until expiration\n  const getDaysUntilExpiration = (expiresAt: string) => {\n    const now = new Date();\n    const expiry = new Date(expiresAt);\n    const diffTime = expiry.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  // Fetch all user settings from /v1/users/me endpoint\n  const fetchUserData = async () => {\n    setIsInitialLoading(true); // Use specific loading state\n    setFetchError(null);\n    \n    try {\n      console.log(\"Fetching user data from /v1/users/me...\");\n      const response = await userApi.getCurrentUser();\n      \n      if (response && response.data) {\n        const fetchedUserData = response.data; // Use a different variable name to avoid confusion with state\n        setUserData(fetchedUserData);\n        \n        console.log(\"Successfully fetched user data:\", fetchedUserData);\n        \n        // Set values for code server form\n        if (fetchedUserData.code_server_password) {\n          codeServerForm.setValue(\"code_server_password\", fetchedUserData.code_server_password);\n        }\n        \n        // Set values for account form (reset to ensure all fields are populated)\n        accountForm.reset({\n          email: fetchedUserData.email || \"\",\n          first_name: fetchedUserData.first_name || \"\",\n          last_name: fetchedUserData.last_name || \"\",\n          password: \"\",\n          password_confirm: \"\"\n        });\n        \n      } else {\n        setFetchError(\"Otrzymano pustą odpowiedź z serwera\");\n        toast.error(\"Nie udało się pobrać danych użytkownika.\");\n      }\n    } catch (error: any) {\n      console.error(\"Error fetching user data:\", error);\n      const errorMessage = error.response?.data?.detail || \"Błąd podczas pobierania danych użytkownika\";\n      setFetchError(errorMessage);\n      toast.error(errorMessage);\n    } finally {\n      setIsInitialLoading(false); // Use specific loading state\n    }\n  };\n    \n  // Handle code server password form submission\n  async function onCodeServerSubmit(values: z.infer<typeof codeServerSchema>) {\n    if (isSubmittingCodeServer) return; \n    \n    setIsSubmittingCodeServer(true);\n    setShowSuccessCodeServer(false);\n    \n    try {\n      // Add artificial delay to make loading state more visible (min 700ms)\n      const startTime = Date.now();\n      await userApi.updateCurrentUser({ \n        code_server_password: values.code_server_password \n      });\n      \n      // Ensure loader is visible for at least 700ms to prevent too quick flashing\n      const elapsed = Date.now() - startTime;\n      if (elapsed < 700) {\n        await new Promise(resolve => setTimeout(resolve, 700 - elapsed));\n      }\n      \n      // Update local state with the new password\n      const updatedUserData = {\n        ...userData,\n        code_server_password: values.code_server_password\n      };\n      setUserData(updatedUserData);\n      \n      codeServerForm.reset({ code_server_password: values.code_server_password }); // Reset form with new value\n      \n      // Show success state on button briefly before resetting\n      setShowSuccessCodeServer(true);\n      \n      toast.success(\"Hasło Code Server zostało pomyślnie zaktualizowane\", {\n        duration: 5000,\n        position: \"top-center\",\n        id: `code-server-update-success-${Date.now()}`,\n        className: \"bg-green-50 border-green-200 text-green-800\",\n        closeButton: true\n      });\n      \n      // Reset success state and close edit form after delay\n      setTimeout(() => {\n        setShowSuccessCodeServer(false);\n        setIsEditingCodeServer(false);\n      }, 1500);\n      \n    } catch (error: any) {\n      const errorMessage = error.response?.data?.detail || \"Wystąpił błąd podczas aktualizacji hasła\";\n      console.error(\"Code server password update error:\", error);\n      \n      toast.error(errorMessage, {\n        duration: 7000,\n        position: \"top-center\", \n        id: `code-server-update-error-${Date.now()}`,\n        className: \"bg-red-50 border-red-200 text-red-800\",\n        closeButton: true\n      });\n      \n      setShowSuccessCodeServer(false);\n    } finally {\n      // If there was an error, we still want to stop the loading state\n      if (!showSuccessCodeServer) {\n        setIsSubmittingCodeServer(false);\n      } else {\n        // For successful submission, the loading state is managed by the success timeout\n        setTimeout(() => {\n          setIsSubmittingCodeServer(false);\n        }, 1500);\n      }\n    }\n  }\n  \n  // Dodajemy nową funkcję do aktualizacji danych w localStorage\n  const updateUserDataInStorage = (updatedData: any) => {\n    try {\n      // Pobierz aktualne dane\n      const storedUserData = localStorage.getItem('user_data');\n      if (storedUserData) {\n        const parsedData = JSON.parse(storedUserData);\n        \n        // Połącz istniejące dane z nowymi\n        const mergedData = { ...parsedData, ...updatedData };\n        \n        // Dodaj pełne imię i nazwisko jako pomocnicze pole\n        if (updatedData.first_name || updatedData.last_name) {\n          const firstName = updatedData.first_name || parsedData.first_name || '';\n          const lastName = updatedData.last_name || parsedData.last_name || '';\n          if (firstName || lastName) {\n            mergedData.full_name = `${firstName} ${lastName}`.trim();\n          }\n        }\n        \n        // Zapisz zaktualizowane dane\n        localStorage.setItem('user_data', JSON.stringify(mergedData));\n        localStorage.setItem('user_data_timestamp', Date.now().toString());\n        \n        console.log(\"User data in localStorage updated:\", mergedData);\n        \n        // Wyzwól własne zdarzenie informujące o aktualizacji danych\n        window.dispatchEvent(new Event('user-data-updated'));\n      } else {\n        // Jeśli nie ma danych w localStorage, zapisz aktualne dane z formularza\n        localStorage.setItem('user_data', JSON.stringify(updatedData));\n        localStorage.setItem('user_data_timestamp', Date.now().toString());\n        window.dispatchEvent(new Event('user-data-updated'));\n      }\n    } catch (error) {\n      console.error(\"Error updating user data in localStorage:\", error);\n    }\n  };\n\n  // Handle account form submission\n  async function onAccountSubmit(values: z.infer<typeof accountSchema>) {\n    if (isSubmittingAccount) return;\n    \n    setIsSubmittingAccount(true);\n    setShowSuccessAccount(false);\n    \n    try {\n      // Add artificial delay to make loading state more visible (min 700ms)\n      const startTime = Date.now();\n      \n      const updateData: any = {\n        email: values.email,\n        first_name: values.first_name,\n        last_name: values.last_name,\n      };\n      \n      if (values.password) {\n        updateData.password = values.password;\n      }\n      \n      await userApi.updateCurrentUser(updateData);\n      \n      // Ensure loader is visible for at least 700ms to prevent too quick flashing\n      const elapsed = Date.now() - startTime;\n      if (elapsed < 700) {\n        await new Promise(resolve => setTimeout(resolve, 700 - elapsed));\n      }\n      \n      // Update the local state with new values\n      const updatedUserData = {\n        ...userData,\n        email: values.email,\n        first_name: values.first_name,\n        last_name: values.last_name,\n      };\n      setUserData(updatedUserData);\n      \n      // Reset form fields after successful update, keeping new data\n      accountForm.reset({\n        email: values.email,\n        first_name: values.first_name,\n        last_name: values.last_name,\n        password: \"\", // Clear password fields\n        password_confirm: \"\" // Clear password fields\n      });\n      \n      // Dodajemy aktualizację danych w localStorage\n      updateUserDataInStorage({\n        email: values.email,\n        first_name: values.first_name,\n        last_name: values.last_name\n      });\n      \n      // Show success state on button\n      setShowSuccessAccount(true);\n      \n      toast.success(\n        values.password \n          ? \"Dane konta oraz hasło zostały pomyślnie zaktualizowane\" \n          : \"Dane konta zostały pomyślnie zaktualizowane\", \n        {\n          duration: 5000,\n          position: \"top-center\",\n          id: `account-update-success-${Date.now()}`,\n          className: \"bg-green-50 border-green-200 text-green-800\",\n        }\n      );\n      \n      // Reset success state after delay\n      setTimeout(() => {\n        setShowSuccessAccount(false);\n      }, 2000);\n      \n    } catch (error: any) {\n      console.error(\"Account update error:\", error);\n      const errorMessage = error.response?.data?.detail || \"Wystąpił błąd podczas aktualizacji danych konta\";\n      \n      toast.error(errorMessage, {\n        duration: 7000,\n        position: \"top-center\",\n        id: `account-update-error-${Date.now()}`,\n        className: \"bg-red-50 border-red-200 text-red-800\",\n      });\n      \n      setShowSuccessAccount(false);\n    } finally {\n      // If there was an error, we still want to stop the loading state\n      if (!showSuccessAccount) {\n        setIsSubmittingAccount(false);\n      } else {\n        // For successful submission, the loading state is managed by the success timeout\n        setTimeout(() => {\n          setIsSubmittingAccount(false);\n        }, 2000);\n      }\n    }\n  }\n\n  // If we're still loading data for the first time, show skeleton UI\n  if (isInitialLoading) { // Use specific loading state for skeleton\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-3xl font-bold\">Ustawienia użytkownika</h1>\n        </div>\n        <Separator />\n        <div className=\"w-full max-w-2xl\">\n          <Card>\n            <CardHeader>\n              <Skeleton className=\"h-8 w-3/4\" />\n              <Skeleton className=\"h-4 w-1/2\" />\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Skeleton className=\"h-10 w-full\" />\n              <Skeleton className=\"h-10 w-full\" />\n              <Skeleton className=\"h-10 w-full\" />\n              <Skeleton className=\"h-10 w-3/4\" />\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  // If there was an error fetching data, show error with retry button\n  if (fetchError && !userData) {\n    return (\n      <div className=\"space-y-6\">\n        {/* ... (reszta kodu błędu bez zmian) ... */}\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-3xl font-bold\">Ustawienia użytkownika</h1>\n        </div>\n\n        <Separator />\n\n        <Card className=\"max-w-2xl\">\n          <CardHeader>\n            <CardTitle className=\"text-red-500\">Błąd podczas pobierania danych</CardTitle>\n            <CardDescription>\n              Nie udało się pobrać danych użytkownika z serwera.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-muted-foreground\">{fetchError}</p>\n            <Button onClick={fetchUserData} disabled={isInitialLoading}>\n              {isInitialLoading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <RefreshCcw className=\"mr-2 h-4 w-4\" />}\n              Spróbuj ponownie\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold\">Ustawienia użytkownika</h1>\n      </div>\n\n      <Separator />\n\n      <Tabs defaultValue=\"account\" className=\"w-full\">\n        <TabsList className=\"mb-6\">\n          <TabsTrigger value=\"account\" className=\"flex items-center gap-2\">\n            <User className=\"h-4 w-4\" />\n            Ustawienia konta\n          </TabsTrigger>\n          <TabsTrigger value=\"code-server\" className=\"flex items-center gap-2\">\n            <Code className=\"h-4 w-4\" />\n            Ustawienia Code-server\n          </TabsTrigger>\n          <TabsTrigger value=\"cli-tokens\" className=\"flex items-center gap-2\">\n            <Key className=\"h-4 w-4\" />\n            Tokeny CLI\n          </TabsTrigger>\n        </TabsList>\n        \n        {/* Account Settings Tab */}\n        <TabsContent value=\"account\">\n          <Card className=\"max-w-2xl\">\n            <CardHeader>\n              <CardTitle>Ustawienia konta</CardTitle>\n              <CardDescription>\n                Zarządzaj swoimi danymi osobowymi i hasłem do logowania\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...accountForm}>\n                <form onSubmit={accountForm.handleSubmit(onAccountSubmit)} className=\"space-y-4\">\n                  {/* Username (Login) field - read-only */}\n                  <div className=\"space-y-2\">\n                    <FormItem>\n                      <FormLabel>Login (nazwa użytkownika)</FormLabel>\n                      <FormControl>\n                        <Input \n                          value={userData?.username || \"\"}\n                          disabled\n                          className=\"bg-muted/50\"\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Twój login nie może zostać zmieniony\n                      </FormDescription>\n                    </FormItem>\n                  </div>\n                  \n                  {/* ... (reszta pól formularza bez zmian) ... */}\n                  <div className=\"grid gap-4 md:grid-cols-2\">\n                    <FormField\n                      control={accountForm.control}\n                      name=\"first_name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Imię</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Jan\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={accountForm.control}\n                      name=\"last_name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Nazwisko</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Kowalski\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <FormField\n                    control={accountForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Adres email</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"jan.kowalski@example.com\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <Separator className=\"my-4\" />\n                  \n                  <div className=\"space-y-2\">\n                    <h3 className=\"text-sm font-medium\">Zmiana hasła (opcjonalnie)</h3>\n                    <p className=\"text-sm text-muted-foreground\">Pozostaw puste, jeśli nie chcesz zmieniać hasła</p>\n                  </div>\n                  \n                  <div className=\"grid gap-4 md:grid-cols-2\">\n                    <FormField\n                      control={accountForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Nowe hasło</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Input \n                                type={showPassword ? \"text\" : \"password\"} \n                                placeholder=\"Nowe hasło\" \n                                {...field} \n                              />\n                              <Button \n                                type=\"button\"\n                                variant=\"ghost\" \n                                size=\"icon\"\n                                className=\"absolute right-0 top-0\"\n                                onClick={() => setShowPassword(!showPassword)}\n                              >\n                                {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                              </Button>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={accountForm.control}\n                      name=\"password_confirm\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Potwierdź nowe hasło</FormLabel>\n                          <FormControl>\n                            <Input \n                              type={showPassword ? \"text\" : \"password\"} \n                              placeholder=\"Powtórz hasło\" \n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <Button \n                    type=\"submit\" \n                    className={`mt-4 relative transition-all duration-300 ${\n                      showSuccessAccount ? \"bg-green-600 hover:bg-green-700\" : \"\"\n                    }`}\n                    disabled={isSubmittingAccount || showSuccessAccount}\n                  >\n                    {isSubmittingAccount ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        <span className=\"animate-pulse\">Zapisywanie...</span>\n                      </>\n                    ) : showSuccessAccount ? (\n                      <>\n                        <svg \n                          className=\"mr-2 h-4 w-4 animate-scale-in-center\" \n                          fill=\"none\" \n                          stroke=\"currentColor\" \n                          viewBox=\"0 0 24 24\" \n                          xmlns=\"http://www.w3.org/2000/svg\"\n                        >\n                          <path \n                            strokeLinecap=\"round\" \n                            strokeLinejoin=\"round\" \n                            strokeWidth={2} \n                            d=\"M5 13l4 4L19 7\" \n                          />\n                        </svg>\n                        Zapisano!\n                      </>\n                    ) : (\n                      <>\n                        <Save className=\"mr-2 h-4 w-4\" />\n                        Zapisz zmiany\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        {/* Code Server Settings Tab */}\n        <TabsContent value=\"code-server\">\n          <Card className=\"max-w-2xl\">\n            <CardHeader>\n              <CardTitle>Ustawienia Code Server</CardTitle>\n              <CardDescription>\n                Zarządzaj hasłem do Code Server używanym przy uruchamianiu kontenerów\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {userData?.code_server_password && !isEditingCodeServer && ( // Show current password only if not editing\n                <div className=\"space-y-2\">\n                  <h3 className=\"text-sm font-medium\">Bieżące hasło Code Server:</h3>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"flex-1 rounded-md border p-2 bg-muted/50\">\n                      {showPassword ? userData.code_server_password : '••••••••'}\n                    </div>\n                    <Button \n                      variant=\"outline\" \n                      size=\"icon\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      title={showPassword ? \"Ukryj hasło\" : \"Pokaż hasło\"}\n                    >\n                      {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {!isEditingCodeServer ? (\n                <Button \n                  onClick={() => {\n                    setIsEditingCodeServer(true);\n                    // Optionally pre-fill form if editing existing password\n                    codeServerForm.setValue(\"code_server_password\", userData?.code_server_password || \"\");\n                  }}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Key className=\"h-4 w-4\" />\n                  {userData?.code_server_password ? \"Zmień hasło\" : \"Ustaw hasło\"}                </Button>              ) : (                <Form {...codeServerForm}>                  <form onSubmit={codeServerForm.handleSubmit(onCodeServerSubmit)} className=\"space-y-4\">                    <FormField                      control={codeServerForm.control}                      name=\"code_server_password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Nowe hasło Code Server</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Input \n                                type={showPassword ? \"text\" : \"password\"}\n                                placeholder=\"Wprowadź nowe hasło\" \n                                {...field} \n                              />\n                              <Button \n                                type=\"button\"\n                                variant=\"ghost\" \n                                size=\"icon\"\n                                className=\"absolute right-0 top-0\"\n                                onClick={() => setShowPassword(!showPassword)}\n                              >\n                                {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                              </Button>\n                            </div>\n                          </FormControl>\n                          <FormDescription>\n                            Hasło musi mieć co najmniej 5 znaków.\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"flex gap-2\">\n                      <Button \n                        type=\"submit\" \n                        disabled={isSubmittingCodeServer || showSuccessCodeServer}\n                        className={`flex items-center gap-2 transition-all duration-300 ${\n                          showSuccessCodeServer ? \"bg-green-600 hover:bg-green-700\" : \"\"\n                        }`}\n                      >\n                        {isSubmittingCodeServer ? (\n                          <>\n                            <Loader2 className=\"h-4 w-4 animate-spin\" />\n                            <span className=\"animate-pulse\">Zapisywanie...</span>\n                          </>\n                        ) : showSuccessCodeServer ? (\n                          <>\n                            <svg \n                              className=\"h-4 w-4 animate-scale-in-center\" \n                              fill=\"none\" \n                              stroke=\"currentColor\" \n                              viewBox=\"0 0 24 24\" \n                              xmlns=\"http://www.w3.org/2000/svg\"\n                            >\n                              <path \n                                strokeLinecap=\"round\" \n                                strokeLinejoin=\"round\" \n                                strokeWidth={2} \n                                d=\"M5 13l4 4L19 7\" \n                              />\n                            </svg>\n                            Zapisano!\n                          </>\n                        ) : (\n                          <>\n                            <Save className=\"h-4 w-4\" />\n                            Zapisz hasło\n                          </>\n                        )}\n                      </Button>\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={() => {\n                          codeServerForm.reset({ code_server_password: userData?.code_server_password || \"\" })\n                          setIsEditingCodeServer(false)\n                        }}\n                        disabled={isSubmittingCodeServer || showSuccessCodeServer}\n                      >\n                        Anuluj\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              )}\n              \n              <div className=\"rounded-md bg-blue-50 p-4 text-sm text-blue-800 dark:bg-blue-900/20 dark:text-blue-300\">\n                <p>To hasło będzie używane do logowania do interfejsu Code Server we wszystkich Twoich kontenerach. Zalecamy użycie silnego i unikalnego hasła.</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* CLI Tokens Tab */}\n        <TabsContent value=\"cli-tokens\">\n          <Card className=\"max-w-4xl\">\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <CardTitle>Tokeny CLI</CardTitle>\n                  <CardDescription>\n                    Zarządzaj tokenami uwierzytelniania dla narzędzi CLI\n                  </CardDescription>\n                </div>\n                <Dialog open={showCreateTokenDialog} onOpenChange={setShowCreateTokenDialog}>\n                  <DialogTrigger asChild>\n                    <Button className=\"flex items-center gap-2\">\n                      <Plus className=\"h-4 w-4\" />\n                      Utwórz nowy token\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Utwórz nowy token CLI</DialogTitle>\n                      <DialogDescription>\n                        Utwórz nowy token do uwierzytelniania w narzędziach CLI\n                      </DialogDescription>\n                    </DialogHeader>\n                    <Form {...cliTokenForm}>\n                      <form onSubmit={cliTokenForm.handleSubmit(createCliToken)} className=\"space-y-4\">\n                        <FormField\n                          control={cliTokenForm.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Nazwa tokenu</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"np. Laptop do pracy, Serwer produkcyjny\" \n                                  {...field} \n                                />\n                              </FormControl>\n                              <FormDescription>\n                                Podaj opisową nazwę, aby łatwo rozpoznać, gdzie używasz tego tokenu\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={cliTokenForm.control}\n                          name=\"expires_days\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Ważność (dni)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  min=\"1\" \n                                  max=\"365\" \n                                  {...field}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                />\n                              </FormControl>\n                              <FormDescription>\n                                Czas ważności tokenu (1-365 dni)\n                              </FormDescription>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <DialogFooter>\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\" \n                            onClick={() => setShowCreateTokenDialog(false)}\n                            disabled={isCreatingToken}\n                          >\n                            Anuluj\n                          </Button>\n                          <Button type=\"submit\" disabled={isCreatingToken}>\n                            {isCreatingToken ? (\n                              <>\n                                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                Tworzenie...\n                              </>\n                            ) : (\n                              \"Utwórz token\"\n                            )}\n                          </Button>\n                        </DialogFooter>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {/* Show new token after creation */}\n              {newTokenData && (\n                <div className=\"mb-6 p-4 border rounded-lg bg-green-50 dark:bg-green-900/20\">\n                  <h3 className=\"font-semibold text-green-800 dark:text-green-300 mb-2\">\n                    Token został utworzony!\n                  </h3>\n                  <p className=\"text-sm text-green-700 dark:text-green-400 mb-3\">\n                    Skopiuj poniższy token i zapisz go w bezpiecznym miejscu. Nie będzie możliwe ponowne jego wyświetlenie.\n                  </p>\n                  <div className=\"flex items-center gap-2 p-3 bg-white dark:bg-gray-800 border rounded font-mono text-sm\">\n                    <code className=\"flex-1 break-all\">{newTokenData.token}</code>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        navigator.clipboard.writeText(newTokenData.token);\n                        toast.success(\"Token skopiowany do schowka!\");\n                      }}\n                    >\n                      <Copy className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  <Button\n                    className=\"mt-3\"\n                    size=\"sm\"\n                    onClick={() => setNewTokenData(null)}\n                  >\n                    Zamknij\n                  </Button>\n                </div>\n              )}\n\n              {/* Tokens list */}\n              <div className=\"space-y-4\">\n                {isLoadingTokens ? (\n                  <div className=\"space-y-3\">\n                    {Array(3).fill(0).map((_, i) => (\n                      <Skeleton key={i} className=\"h-20 w-full\" />\n                    ))}\n                  </div>\n                ) : cliTokens.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Key className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                    <p>Nie masz jeszcze żadnych tokenów CLI</p>\n                    <p className=\"text-sm\">Utwórz pierwszy token, aby rozpocząć korzystanie z CLI</p>\n                  </div>\n                ) : (\n                  cliTokens.map((token) => {\n                    const isExpired = new Date(token.expires_at) < new Date();\n                    const daysUntilExpiry = Math.ceil(\n                      (new Date(token.expires_at).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)\n                    );\n\n                    return (\n                      <div key={token.id} className={`p-4 border rounded-lg ${\n                        !token.is_active || isExpired ? 'bg-muted/50' : 'bg-background'\n                      }`}>\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <h3 className=\"font-semibold\">{token.name}</h3>\n                              {!token.is_active ? (\n                                <Badge variant=\"secondary\">Nieaktywny</Badge>\n                              ) : isExpired ? (\n                                <Badge variant=\"destructive\">Wygasł</Badge>\n                              ) : daysUntilExpiry <= 7 ? (\n                                <Badge variant=\"outline\" className=\"text-orange-600 border-orange-600\">\n                                  Wygasa za {daysUntilExpiry} dni\n                                </Badge>\n                              ) : (\n                                <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                                  Aktywny\n                                </Badge>\n                              )}\n                            </div>\n                            \n                            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-muted-foreground\">\n                              <div className=\"flex items-center gap-2\">\n                                <Calendar className=\"h-4 w-4\" />\n                                <span>Utworzony: {new Date(token.created_at).toLocaleDateString('pl-PL')}</span>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                <Calendar className=\"h-4 w-4\" />\n                                <span>Wygasa: {new Date(token.expires_at).toLocaleDateString('pl-PL')}</span>\n                              </div>\n                              {token.last_used_at ? (\n                                <div className=\"flex items-center gap-2\">\n                                  <Globe className=\"h-4 w-4\" />\n                                  <span>Ostatnie użycie: {new Date(token.last_used_at).toLocaleDateString('pl-PL')}</span>\n                                </div>\n                              ) : (\n                                <div className=\"flex items-center gap-2\">\n                                  <Globe className=\"h-4 w-4\" />\n                                  <span>Nigdy nie używany</span>\n                                </div>\n                              )}\n                            </div>\n\n                            {token.last_used_ip && (\n                              <div className=\"mt-2 text-sm text-muted-foreground\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Monitor className=\"h-4 w-4\" />\n                                  <span>Ostatnie IP: {token.last_used_ip}</span>\n                                </div>\n                              </div>\n                            )}\n                          </div>\n\n                          <div className=\"flex items-center gap-2 ml-4\">\n                            {token.is_active && !isExpired && (\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button variant=\"outline\" size=\"sm\">\n                                    <RefreshCcw className=\"h-4 w-4 mr-1\" />\n                                    Przedłuż\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent>\n                                  <DialogHeader>\n                                    <DialogTitle>Przedłuż token \"{token.name}\"</DialogTitle>\n                                    <DialogDescription>\n                                      Wybierz o ile dni przedłużyć ważność tokenu\n                                    </DialogDescription>\n                                  </DialogHeader>\n                                  <div className=\"grid gap-4 py-4\">\n                                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                                      <Button\n                                        onClick={() => extendCliToken(token.id, 30)}\n                                        className=\"col-span-4\"\n                                      >\n                                        Przedłuż o 30 dni\n                                      </Button>\n                                    </div>\n                                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                                      <Button\n                                        onClick={() => extendCliToken(token.id, 90)}\n                                        className=\"col-span-4\"\n                                      >\n                                        Przedłuż o 90 dni\n                                      </Button>\n                                    </div>\n                                    <div className=\"grid grid-cols-4 items-center gap-4\">\n                                      <Button\n                                        onClick={() => extendCliToken(token.id, 180)}\n                                        className=\"col-span-4\"\n                                      >\n                                        Przedłuż o 180 dni\n                                      </Button>\n                                    </div>\n                                  </div>\n                                </DialogContent>\n                              </Dialog>\n                            )}\n                            \n                            <AlertDialog>\n                              <AlertDialogTrigger asChild>\n                                <Button variant=\"destructive\" size=\"sm\">\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </AlertDialogTrigger>\n                              <AlertDialogContent>\n                                <AlertDialogHeader>\n                                  <AlertDialogTitle>Usuń token</AlertDialogTitle>\n                                  <AlertDialogDescription>\n                                    Czy na pewno chcesz usunąć token \"{token.name}\"? \n                                    Ta akcja nie może zostać cofnięta i uniemożliwi korzystanie z tego tokenu.\n                                  </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                  <AlertDialogCancel>Anuluj</AlertDialogCancel>\n                                  <AlertDialogAction\n                                    onClick={() => deleteCliToken(token.id, token.name)}\n                                    className=\"bg-red-600 hover:bg-red-700\"\n                                  >\n                                    Usuń token\n                                  </AlertDialogAction>\n                                </AlertDialogFooter>\n                              </AlertDialogContent>\n                            </AlertDialog>\n                          </div>\n                        </div>\n                      </div>\n                    )\n                  })\n                )}\n              </div>\n\n              {cliTokens.length > 0 && (\n                <div className=\"mt-6 pt-6 border-t\">\n                  <div className=\"rounded-md bg-blue-50 p-4 text-sm text-blue-800 dark:bg-blue-900/20 dark:text-blue-300\">\n                    <h4 className=\"font-semibold mb-2\">Informacje o tokenach CLI:</h4>\n                    <ul className=\"space-y-1 list-disc list-inside\">\n                      <li>Tokeny CLI umożliwiają uwierzytelnianie w narzędziach wiersza poleceń bez podawania hasła</li>\n                      <li>Każdy token ma określony czas ważności i może być przedłużony lub usunięty w dowolnym momencie</li>\n                      <li>Token jest wyświetlany tylko podczas tworzenia - zapisz go w bezpiecznym miejscu</li>\n                      <li>Monitoruj ostatnie użycie tokenów, aby wykryć nieautoryzowany dostęp</li>\n                    </ul>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/app/dashboard/submit-job/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardFooter' is defined but never used.","line":22,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2794,2797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2794,2797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\nimport { toast } from \"sonner\";\nimport { Loader2 } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { jobsApi } from \"@/lib/api-client\";\n\nconst formSchema = z.object({\n  job_name: z.string().min(3, \"Nazwa musi mieć co najmniej 3 znaki\").max(50, \"Nazwa nie może przekraczać 50 znaków\"),\n  template_name: z.string().min(2, \"Wybierz szablon\"),\n  num_cpus: z.coerce.number().int().min(10, \"Minimum 1 CPU\").max(128, \"Maksimum 128 CPU\"),\n  memory_gb: z.coerce.number().int().min(24, \"Minimum 1 GB\").max(1024, \"Maksimum 1024 GB\"),\n  num_gpus: z.coerce.number().int().min(0, \"Minimum 0 GPU\").max(16, \"Maksimum 16 GPU\"),\n  time_limit: z.string().min(5, \"Określ limit czasu (np. 24:00:00)\"),\n  preview: z.boolean().optional().default(false)\n});\n\nexport default function SubmitJobPage() {\n  const router = useRouter();\n  const [isLoading, setIsLoading] = useState(false);\n  const [templates, setTemplates] = useState<string[]>([]);\n  const [previewScript, setPreviewScript] = useState<string | null>(null);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      job_name: \"\",\n      template_name: \"\",\n      num_cpus: 10,\n      memory_gb: 24,\n      num_gpus: 0,\n      time_limit: \"24:00:00\",\n      preview: false\n    },\n  });\n\n  // Pobierz dostępne szablony przy pierwszym renderowaniu\n  useEffect(() => {\n    async function fetchTemplates() {\n      try {\n        const response = await jobsApi.getTemplates();\n        setTemplates(response.data);\n      } catch (error) {\n        toast.error(\"Nie udało się pobrać listy szablonów\");\n        console.error(error);\n      }\n    }\n    fetchTemplates();\n  }, []);\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsLoading(true);\n    try {\n      if (values.preview) {\n        // Generuj podgląd bez wysyłania zadania\n        const response = await jobsApi.createJob({ ...values, preview: true });\n        setPreviewScript(response.data.script);\n        toast.info(\"Wygenerowano podgląd skryptu\");\n      } else {\n        // Wyślij zadanie\n        const response = await jobsApi.createJob(values);\n        toast.success(`Zadanie zostało utworzone! ID: ${response.data.job_id}`);\n        router.push(\"/dashboard\");\n      }\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.detail || \"Błąd podczas wysyłania zadania\";\n      \n      // Check for duplicate container name error (both English and potential Polish versions)\n      const isDuplicateNameError = \n        errorMessage.includes(\"container with the name\") && errorMessage.includes(\"already exists\") ||\n        errorMessage.includes(\"Container with name\") && errorMessage.includes(\"already exists\") ||\n        errorMessage.includes(\"kontener o nazwie\") && errorMessage.includes(\"już istnieje\");\n      \n      if (isDuplicateNameError) {\n        // Set form field error for better UX\n        form.setError(\"job_name\", {\n          type: \"manual\",\n          message: \"Kontener o tej nazwie już istnieje. Wybierz inną nazwę.\"\n        });\n        \n        // Show Polish toast message\n        toast.error(\"Kontener o tej nazwie już istnieje. Wybierz inną nazwę.\", {\n          duration: 5000,\n          closeButton: true\n        });\n      } else {\n        // Show original error message for other errors\n        toast.error(errorMessage, {\n          duration: 5000,\n          closeButton: true\n        });\n      }\n      \n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold\">Nowe zadanie</h1>\n        <Button\n          variant=\"outline\"\n          onClick={() => router.push(\"/dashboard\")}\n        >\n          Powrót\n        </Button>\n      </div>\n\n      <Card className=\"max-w-3xl mx-auto\">\n        <CardHeader>\n          <CardTitle>Formularz tworzenia zadania</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"job_name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nazwa zadania</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"np. container_test\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Unikalna nazwa identyfikująca zadanie\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"template_name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Szablon</FormLabel>\n                    <FormControl>\n                      <select\n                        className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                        {...field}\n                      >\n                        <option value=\"\">Wybierz szablon</option>\n                        {templates.map((template) => (\n                          <option key={template} value={template}>\n                            {template}\n                          </option>\n                        ))}\n                      </select>\n                    </FormControl>\n                    <FormDescription>\n                      Wybierz szablon definiujący konfigurację kontenera\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"num_cpus\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Liczba CPU</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" min={1} max={128} {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"memory_gb\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Pamięć RAM (GB)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" min={1} max={1024} {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"num_gpus\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Liczba GPU</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" min={0} max={16} {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"time_limit\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Limit czasu</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"24:00:00\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"flex space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    form.setValue(\"preview\", true);\n                    form.handleSubmit(onSubmit)();\n                    form.setValue(\"preview\", false);\n                  }}\n                  disabled={isLoading}\n                >\n                  {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Podgląd skryptu\n                </Button>\n                <Button type=\"submit\" disabled={isLoading}>\n                  {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Wyślij zadanie\n                </Button>\n              </div>\n            </form>\n          </Form>\n          \n          {previewScript && (\n            <div className=\"mt-6 border rounded-md p-4 bg-muted/50\">\n              <h3 className=\"font-medium mb-2\">Podgląd skryptu:</h3>\n              <pre className=\"whitespace-pre-wrap bg-muted p-2 rounded text-xs overflow-x-auto\">\n                {previewScript}\n              </pre>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/app/dashboard/task_queue/[id]/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[892,895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[892,895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1654,1657],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1654,1657],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1753,1756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1753,1756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isRefreshing' is assigned a value but never used.","line":71,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'errorMessage' is assigned a value but never used.","line":73,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2732,2735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2732,2735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3439,3442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3439,3442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'refreshTask'. Either include it or remove the dependency array.","line":131,"column":6,"nodeType":"ArrayExpression","endLine":131,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [refreshTask, task]","fix":{"range":[4043,4049],"text":"[refreshTask, task]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4682,4685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4682,4685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":244,"column":58,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7519,7578],"text":"\n                    Czy na pewno chcesz anulować zadanie &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7519,7578],"text":"\n                    Czy na pewno chcesz anulować zadanie &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7519,7578],"text":"\n                    Czy na pewno chcesz anulować zadanie &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7519,7578],"text":"\n                    Czy na pewno chcesz anulować zadanie &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":244,"column":70,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[7589,7663],"text":"&quot;? \n                    Ta operacja jest nieodwracalna.\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[7589,7663],"text":"&ldquo;? \n                    Ta operacja jest nieodwracalna.\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[7589,7663],"text":"&#34;? \n                    Ta operacja jest nieodwracalna.\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[7589,7663],"text":"&rdquo;? \n                    Ta operacja jest nieodwracalna.\n                  "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":477,"column":28,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17016,17080],"text":"Kliknij &quot;Pobierz wyniki\", aby zobaczyć dane wyjściowe symulacji."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17016,17080],"text":"Kliknij &ldquo;Pobierz wyniki\", aby zobaczyć dane wyjściowe symulacji."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17016,17080],"text":"Kliknij &#34;Pobierz wyniki\", aby zobaczyć dane wyjściowe symulacji."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17016,17080],"text":"Kliknij &rdquo;Pobierz wyniki\", aby zobaczyć dane wyjściowe symulacji."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":477,"column":43,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[17016,17080],"text":"Kliknij \"Pobierz wyniki&quot;, aby zobaczyć dane wyjściowe symulacji."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[17016,17080],"text":"Kliknij \"Pobierz wyniki&ldquo;, aby zobaczyć dane wyjściowe symulacji."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[17016,17080],"text":"Kliknij \"Pobierz wyniki&#34;, aby zobaczyć dane wyjściowe symulacji."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[17016,17080],"text":"Kliknij \"Pobierz wyniki&rdquo;, aby zobaczyć dane wyjściowe symulacji."},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { toast } from \"sonner\";\nimport { RefreshCcw, ArrowLeft, Download, FilePlus2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from \"@/components/ui/dialog\";\nimport { tasksApi } from \"@/lib/api-client\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { use } from \"react\"; // Import React.use\n\ninterface TaskDetail {\n  id: number;\n  task_id: string;\n  name: string;\n  status: string;\n  simulation_file: string;\n  parameters: any;\n  owner_id: number;\n  partition: string;\n  num_cpus: number;\n  memory_gb: number;\n  num_gpus: number;\n  time_limit: string;\n  output_dir: string;\n  results_file: string | null;\n  progress: number;\n  retry_count: number;\n  created_at: string;\n  queued_at: string;\n  submitted_at: string | null;\n  started_at: string | null;\n  finished_at: string | null;\n  next_retry_at: string | null;\n  error_message: string | null;\n  exit_code: number | null;\n  slurm_job_id: string | null;\n  node: string | null;\n}\n\ninterface TaskResults {\n  task_id: string;\n  status: string;\n  started_at: string | null;\n  finished_at: string | null;\n  elapsed_time: number | null;\n  output_dir: string | null;\n  results_file: string | null;\n  output_files?: string[];\n  results_data?: any;\n  error_message?: string;\n  exit_code?: number;\n  retry_count?: number;\n  previous_attempts?: any[];\n  output_dir_exists?: boolean;\n}\n\nexport default function TaskDetailPage({ params }: { params: Promise<{ id: string }> }) {\n  const router = useRouter();\n  const unwrappedParams = use(params); // Unwrap the params Promise\n  const taskId = parseInt(unwrappedParams.id);\n  \n  const [task, setTask] = useState<TaskDetail | null>(null);\n  const [results, setResults] = useState<TaskResults | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isLoadingResults, setIsLoadingResults] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [isCanceling, setIsCanceling] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  \n  // Fetch task details\n  useEffect(() => {\n    const fetchTask = async () => {\n      setIsLoading(true);\n      try {\n        const response = await tasksApi.getTask(taskId);\n        setTask(response.data);\n        setErrorMessage(null);\n      } catch (error: any) {\n        const message = error.response?.data?.detail || \"Nie udało się pobrać szczegółów zadania\";\n        setErrorMessage(message);\n        toast.error(message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    fetchTask();\n  }, [taskId]);\n  \n  // Fetch task results if the task is completed\n  useEffect(() => {\n    if (!task) return;\n    \n    if (['COMPLETED', 'ERROR', 'ERROR_RETRY_1', 'ERROR_RETRY_2', 'ERROR_RETRY_3', 'CANCELLED'].includes(task.status)) {\n      const fetchResults = async () => {\n        setIsLoadingResults(true);\n        try {\n          const response = await tasksApi.getTaskResults(taskId);\n          setResults(response.data);\n        } catch (error: any) {\n          console.error(\"Nie udało się pobrać wyników zadania:\", error);\n        } finally {\n          setIsLoadingResults(false);\n        }\n      };\n      \n      fetchResults();\n    }\n  }, [task, taskId]);\n  \n  // Auto-refresh for active tasks\n  useEffect(() => {\n    if (!task) return;\n    \n    let interval: NodeJS.Timeout | null = null;\n    \n    if (['PENDING', 'CONFIGURING', 'RUNNING'].includes(task.status)) {\n      interval = setInterval(() => {\n        refreshTask();\n      }, 10000); // co 10 sekund\n    }\n    \n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [task]);\n  \n  // Function to refresh task data\n  const refreshTask = async () => {\n    setIsRefreshing(true);\n    try {\n      const response = await tasksApi.getTask(taskId);\n      setTask(response.data);\n    } catch (error) {\n      console.error(\"Błąd podczas odświeżania zadania:\", error);\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  // Cancel task\n  const cancelTask = async () => {\n    if (!task) return;\n    \n    setIsCanceling(true);\n    try {\n      await tasksApi.cancelTask(task.task_id);\n      toast.success(\"Zadanie zostało anulowane\");\n      refreshTask(); // Refresh data after cancellation\n    } catch (error: any) {\n      toast.error(\n        error.response?.data?.detail || \"Nie udało się anulować zadania\"\n      );\n      console.error(error);\n    } finally {\n      setIsCanceling(false);\n    }\n  };\n\n  // Format date\n  const formatDate = (dateString: string | null) => {\n    if (!dateString) return \"Nie określono\";\n    return new Date(dateString).toLocaleString();\n  };\n\n  // Format duration from seconds\n  const formatDuration = (seconds: number | null) => {\n    if (seconds === null) return \"Nie określono\";\n    \n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m ${remainingSeconds}s`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${remainingSeconds}s`;\n    } else {\n      return `${remainingSeconds}s`;\n    }\n  };\n\n  // Get status badge variant\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"RUNNING\":\n        return \"default\";\n      case \"PENDING\":\n      case \"CONFIGURING\":\n        return \"secondary\";\n      case \"COMPLETED\":\n        return \"success\";\n      case \"ERROR\":\n      case \"ERROR_RETRY_1\":\n      case \"ERROR_RETRY_2\":\n      case \"ERROR_RETRY_3\":\n        return \"destructive\";\n      case \"CANCELLED\":\n      case \"TIMEOUT\":\n        return \"outline\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  if (isLoading) {\n    return <div className=\"flex justify-center items-center h-[50vh]\">Ładowanie szczegółów zadania...</div>;\n  }\n\n  if (!task) {\n    return <div className=\"flex justify-center items-center h-[50vh]\">Nie znaleziono zadania</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" size=\"icon\" onClick={() => router.push(\"/dashboard/task_queue\")}>\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <h1 className=\"text-3xl font-bold\">Zadanie symulacji: {task.name}</h1>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={refreshTask} variant=\"outline\" size=\"sm\">\n            <RefreshCcw className=\"h-4 w-4 mr-2\" />\n            Odśwież\n          </Button>\n          {(task.status === \"PENDING\" || task.status === \"CONFIGURING\" || task.status === \"RUNNING\") && (\n            <Dialog>\n              <DialogTrigger asChild>\n                <Button variant=\"destructive\" size=\"sm\" disabled={isCanceling}>\n                  {isCanceling ? \"Anulowanie...\" : \"Anuluj zadanie\"}\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Potwierdzenie anulowania</DialogTitle>\n                  <DialogDescription>\n                    Czy na pewno chcesz anulować zadanie \"{task.name}\"? \n                    Ta operacja jest nieodwracalna.\n                  </DialogDescription>\n                </DialogHeader>\n                <DialogFooter>\n                  <DialogClose asChild>\n                    <Button variant=\"outline\">Anuluj</Button>\n                  </DialogClose>\n                  <Button variant=\"destructive\" onClick={cancelTask}>\n                    Tak, anuluj zadanie\n                  </Button>\n                </DialogFooter>\n              </DialogContent>\n            </Dialog>\n          )}\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Podstawowe informacje */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Informacje podstawowe</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">ID zadania:</span>\n              <span>{task.task_id}</span>\n            </div>\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">Nazwa:</span>\n              <span>{task.name}</span>\n            </div>\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">Status:</span>\n              <Badge variant={getStatusBadgeVariant(task.status)}>\n                {task.status}\n                {task.retry_count > 0 && ` (${task.retry_count})`}\n              </Badge>\n            </div>\n            {task.slurm_job_id && (\n              <div className=\"flex justify-between py-1\">\n                <span className=\"font-medium\">SLURM Job ID:</span>\n                <span>{task.slurm_job_id}</span>\n              </div>\n            )}\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">Partycja SLURM:</span>\n              <span>{task.partition}</span>\n            </div>\n            <div className=\"flex justify-between py-1\">\n              <span className=\"font-medium\">Wykonywane na węźle:</span>\n              <span>{task.node || 'Nie przypisano'}</span>\n            </div>\n            {task.status === \"RUNNING\" && task.progress > 0 && (\n              <div className=\"py-2\">\n                <span className=\"font-medium\">Postęp:</span>\n                <div className=\"mt-1\">\n                  <Progress value={task.progress} className=\"h-2\" />\n                  <div className=\"flex justify-between mt-1 text-xs text-muted-foreground\">\n                    <span>0%</span>\n                    <span>{task.progress}%</span>\n                    <span>100%</span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Zasoby i czasowanie */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Zasoby i czasowanie</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between py-1\">\n                  <span className=\"font-medium\">CPU:</span>\n                  <span>{task.num_cpus}</span>\n                </div>\n                <div className=\"flex justify-between py-1\">\n                  <span className=\"font-medium\">Pamięć RAM:</span>\n                  <span>{task.memory_gb} GB</span>\n                </div>\n                <div className=\"flex justify-between py-1\">\n                  <span className=\"font-medium\">GPU:</span>\n                  <span>{task.num_gpus}</span>\n                </div>\n                <div className=\"flex justify-between py-1\">\n                  <span className=\"font-medium\">Limit czasu:</span>\n                  <span className=\"font-mono\">{task.time_limit}</span>\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between py-1\">\n                  <span className=\"font-medium\">Utworzono:</span>\n                  <span title={task.created_at}>{formatDate(task.created_at)}</span>\n                </div>\n                {task.submitted_at && (\n                  <div className=\"flex justify-between py-1\">\n                    <span className=\"font-medium\">Wysłano do SLURM:</span>\n                    <span title={task.submitted_at}>{formatDate(task.submitted_at)}</span>\n                  </div>\n                )}\n                {task.started_at && (\n                  <div className=\"flex justify-between py-1\">\n                    <span className=\"font-medium\">Czas startu:</span>\n                    <span title={task.started_at}>{formatDate(task.started_at)}</span>\n                  </div>\n                )}\n                {task.finished_at && (\n                  <div className=\"flex justify-between py-1\">\n                    <span className=\"font-medium\">Czas zakończenia:</span>\n                    <span title={task.finished_at}>{formatDate(task.finished_at)}</span>\n                  </div>\n                )}\n                {task.next_retry_at && (\n                  <div className=\"flex justify-between py-1\">\n                    <span className=\"font-medium\">Następna próba:</span>\n                    <span title={task.next_retry_at}>{formatDate(task.next_retry_at)}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Szczegóły symulacji */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Szczegóły symulacji</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <h3 className=\"font-medium\">Plik symulacji:</h3>\n            <div className=\"bg-muted p-2 rounded-md overflow-x-auto\">\n              <code>{task.simulation_file}</code>\n            </div>\n          </div>\n          \n          {task.parameters && (\n            <div className=\"space-y-2\">\n              <h3 className=\"font-medium\">Parametry symulacji:</h3>\n              <div className=\"bg-muted p-2 rounded-md overflow-x-auto\">\n                <pre>{JSON.stringify(task.parameters, null, 2)}</pre>\n              </div>\n            </div>\n          )}\n          \n          {task.output_dir && (\n            <div className=\"space-y-2\">\n              <h3 className=\"font-medium\">Katalog wyjściowy:</h3>\n              <div className=\"bg-muted p-2 rounded-md overflow-x-auto\">\n                <code>{task.output_dir}</code>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Error information */}\n      {task.error_message && (\n        <Card className=\"border-destructive\">\n          <CardHeader className=\"bg-destructive/10\">\n            <CardTitle className=\"text-destructive\">Błąd symulacji</CardTitle>\n          </CardHeader>\n          <CardContent className=\"pt-6\">\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <h3 className=\"font-medium\">Komunikat błędu:</h3>\n                <div className=\"bg-muted p-2 rounded-md overflow-x-auto\">\n                  <code className=\"text-destructive whitespace-pre-wrap\">{task.error_message}</code>\n                </div>\n              </div>\n              \n              {task.exit_code !== null && (\n                <div className=\"flex items-center\">\n                  <span className=\"font-medium mr-2\">Kod wyjścia:</span>\n                  <Badge variant=\"outline\">{task.exit_code}</Badge>\n                </div>\n              )}\n              \n              {task.retry_count > 0 && (\n                <div className=\"flex items-center\">\n                  <span className=\"font-medium mr-2\">Liczba ponownych prób:</span>\n                  <Badge variant=\"secondary\">{task.retry_count}</Badge>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Results section */}\n      {(task.status === \"COMPLETED\" || \n        task.status === \"ERROR\" || \n        task.status === \"ERROR_RETRY_1\" || \n        task.status === \"ERROR_RETRY_2\" || \n        task.status === \"ERROR_RETRY_3\" || \n        task.status === \"CANCELLED\") && (\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <div>\n              <CardTitle>Wyniki symulacji</CardTitle>\n              <CardDescription>\n                Dane wyjściowe z przeprowadzonej symulacji\n              </CardDescription>\n            </div>\n            {!results && (\n              <Button \n                variant=\"outline\" \n                onClick={() => fetchResults()}\n                disabled={isLoadingResults}\n              >\n                {isLoadingResults ? (\n                  <><RefreshCcw className=\"h-4 w-4 mr-2 animate-spin\" /> Pobieranie...</>\n                ) : (\n                  <><FilePlus2 className=\"h-4 w-4 mr-2\" /> Pobierz wyniki</>\n                )}\n              </Button>\n            )}\n          </CardHeader>\n          <CardContent>\n            {isLoadingResults ? (\n              <div className=\"flex items-center justify-center py-6\">\n                <RefreshCcw className=\"h-6 w-6 animate-spin mr-2\" />\n                <p>Pobieranie wyników...</p>\n              </div>\n            ) : !results ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <p>Kliknij \"Pobierz wyniki\", aby zobaczyć dane wyjściowe symulacji.</p>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {/* Basic result info */}\n                <div className=\"space-y-2\">\n                  <h3 className=\"font-medium\">Informacje ogólne:</h3>\n                  <div className=\"bg-muted p-3 rounded-md\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Status:</span>\n                        <Badge variant={getStatusBadgeVariant(results.status)}>\n                          {results.status}\n                        </Badge>\n                      </div>\n                      {results.elapsed_time !== null && (\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-muted-foreground\">Czas wykonania:</span>\n                          <span>{formatDuration(results.elapsed_time)}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Output files */}\n                {results.output_files && results.output_files.length > 0 && (\n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-medium\">Pliki wyjściowe:</h3>\n                    <div className=\"bg-muted p-3 rounded-md\">\n                      <ul className=\"space-y-2\">\n                        {results.output_files.map((file, index) => (\n                          <li key={index} className=\"flex items-center justify-between\">\n                            <code className=\"text-xs overflow-hidden text-ellipsis\">{file}</code>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Download className=\"h-4 w-4\" />\n                            </Button>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                )}\n                \n                {/* Results data */}\n                {results.results_data && (\n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-medium\">Dane wynikowe:</h3>\n                    <div className=\"bg-muted p-3 rounded-md overflow-x-auto\">\n                      <pre className=\"text-xs\">{JSON.stringify(results.results_data, null, 2)}</pre>\n                    </div>\n                  </div>\n                )}\n                \n                {/* Error information */}\n                {(results.error_message || results.exit_code) && (\n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-medium text-destructive\">Informacje o błędzie:</h3>\n                    {results.error_message && (\n                      <div className=\"bg-destructive/10 p-3 rounded-md border border-destructive\">\n                        <p className=\"text-destructive whitespace-pre-wrap\">{results.error_message}</p>\n                      </div>\n                    )}\n                    {results.exit_code !== undefined && (\n                      <div className=\"flex items-center mt-2\">\n                        <span className=\"text-muted-foreground mr-2\">Kod wyjścia:</span>\n                        <Badge variant=\"outline\">{results.exit_code}</Badge>\n                      </div>\n                    )}\n                  </div>\n                )}\n                \n                {/* Previous attempts */}\n                {results.previous_attempts && results.previous_attempts.length > 0 && (\n                  <div className=\"space-y-4\">\n                    <Separator />\n                    <h3 className=\"font-medium\">Historia ponownych prób:</h3>\n                    <div className=\"space-y-4\">\n                      {results.previous_attempts.map((attempt, index) => (\n                        <div key={index} className=\"bg-muted/50 p-3 rounded-md border\">\n                          <div className=\"flex justify-between items-center mb-2\">\n                            <h4 className=\"font-medium\">Próba #{index + 1}</h4>\n                            <Badge variant={getStatusBadgeVariant(attempt.status)}>\n                              {attempt.status}\n                            </Badge>\n                          </div>\n                          <div className=\"text-sm space-y-2\">\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">SLURM Job ID:</span>\n                              <span>{attempt.slurm_job_id}</span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-muted-foreground\">Czas:</span>\n                              <span>{formatDate(attempt.timestamp)}</span>\n                            </div>\n                            {attempt.error_message && (\n                              <div className=\"mt-2\">\n                                <span className=\"text-muted-foreground\">Błąd:</span>\n                                <div className=\"mt-1 bg-destructive/10 p-2 rounded text-destructive text-xs\">\n                                  {attempt.error_message}\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/app/dashboard/task_queue/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":79,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3413,3416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3413,3416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3906,3909],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3906,3909],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":163,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5055,5058],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5055,5058],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":178,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5561,5564],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5561,5564],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":378,"column":53,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12754,12813],"text":"Użyj zakładki &quot;Dodaj nowe zadanie\", aby utworzyć symulację."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12754,12813],"text":"Użyj zakładki &ldquo;Dodaj nowe zadanie\", aby utworzyć symulację."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12754,12813],"text":"Użyj zakładki &#34;Dodaj nowe zadanie\", aby utworzyć symulację."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12754,12813],"text":"Użyj zakładki &rdquo;Dodaj nowe zadanie\", aby utworzyć symulację."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":378,"column":72,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[12754,12813],"text":"Użyj zakładki \"Dodaj nowe zadanie&quot;, aby utworzyć symulację."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[12754,12813],"text":"Użyj zakładki \"Dodaj nowe zadanie&ldquo;, aby utworzyć symulację."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[12754,12813],"text":"Użyj zakładki \"Dodaj nowe zadanie&#34;, aby utworzyć symulację."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[12754,12813],"text":"Użyj zakładki \"Dodaj nowe zadanie&rdquo;, aby utworzyć symulację."},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport { toast } from \"sonner\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\nimport { Loader2, RefreshCcw, Plus, FileText } from \"lucide-react\";\nimport { useRouter } from \"next/navigation\";\nimport Link from \"next/link\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { tasksApi } from \"@/lib/api-client\"; // Update import to use tasksApi\nimport { Progress } from \"@/components/ui/progress\";\n\n// Define task interface\ninterface Task {\n  id: number;\n  task_id: string;\n  name: string;\n  status: string;\n  simulation_file: string;\n  progress: number;\n  created_at: string;\n  partition: string;\n  num_cpus: number;\n  memory_gb: number;\n  num_gpus: number;\n  time_limit: string;\n  owner_id: number;\n  retry_count: number;\n  node?: string;\n  error_message?: string;\n}\n\n// Define interface for the queue status\ninterface QueueStatus {\n  total_tasks: number;\n  status_counts: Record<string, number>;\n  avg_wait_time: number | null;\n  next_task_id: string | null;\n  active_worker_count: number;\n}\n\n// Schema for submitting new task\nconst formSchema = z.object({\n  name: z.string().min(3, \"Nazwa musi mieć co najmniej 3 znaki\").max(50, \"Nazwa nie może przekraczać 50 znaków\"),\n  simulation_file: z.string().min(1, \"Ścieżka do pliku symulacji jest wymagana\"),\n  partition: z.string().min(1, \"Wybierz partycję\"),\n  num_cpus: z.coerce.number().int().min(1, \"Minimum 1 CPU\").max(128, \"Maksimum 128 CPU\"),\n  memory_gb: z.coerce.number().int().min(4, \"Minimum 4 GB\").max(1024, \"Maksimum 1024 GB\"),\n  num_gpus: z.coerce.number().int().min(0, \"Minimum 0 GPU\").max(8, \"Maksimum 8 GPU\"),\n  time_limit: z.string().min(5, \"Określ limit czasu (np. 24:00:00)\").regex(/^\\d+:\\d{2}:\\d{2}$/, \"Format: HH:MM:SS\"),\n  priority: z.coerce.number().int().min(0, \"Minimum 0\").max(100, \"Maksimum 100\"),\n});\n\nexport default function TaskQueuePage() {\n  const router = useRouter();\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [queueStatus, setQueueStatus] = useState<QueueStatus | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [statusFilter, setStatusFilter] = useState<string | null>(null);\n\n  // Initialize form\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      simulation_file: \"\",\n      partition: \"proxima\",\n      num_cpus: 5,\n      memory_gb: 24,\n      num_gpus: 1,\n      time_limit: \"24:00:00\",\n      priority: 0,\n    },\n  });\n\n  // Fetch tasks\n  const fetchTasks = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const response = await tasksApi.getTasks();\n      setTasks(response.data);\n      return response;\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.detail || \"Nie udało się pobrać listy zadań\";\n      toast.error(errorMessage);\n      console.error(\"Error fetching tasks:\", error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Fetch queue status\n  const fetchQueueStatus = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      const response = await tasksApi.getQueueStatus();\n      setQueueStatus(response.data);\n    } catch (error: any) {\n      console.error(\"Error fetching queue status:\", error);\n      // Don't show toast to avoid overwhelming the user\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Fetch data on first render\n  useEffect(() => {\n    const initialFetch = async () => {\n      await Promise.all([fetchTasks(), fetchQueueStatus()]);\n    };\n    initialFetch();\n  }, [fetchTasks, fetchQueueStatus]);\n\n  // Refresh data\n  const refreshData = async () => {\n    setIsRefreshing(true);\n    try {\n      await Promise.all([fetchTasks(), fetchQueueStatus()]);\n      toast.success(\"Dane zostały odświeżone\");\n    } catch (error) {\n      console.error(\"Error refreshing data:\", error);\n      toast.error(\"Błąd podczas odświeżania danych\");\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  // Submit new task\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsSubmitting(true);\n    try {\n      const response = await tasksApi.createTask(values);\n      toast.success(`Zadanie symulacji zostało utworzone! ID: ${response.data.task_id}`);\n      form.reset();\n      fetchTasks(); // Refresh list after adding\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.detail || \"Błąd podczas wysyłania zadania\";\n      toast.error(errorMessage);\n      console.error(\"Error submitting task:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  // Cancel task - updated to use task id as number\n  const cancelTask = async (taskId: number) => {\n    try {\n      await tasksApi.cancelTask(taskId);\n      toast.success(\"Zadanie zostało anulowane\");\n      fetchTasks(); // Refresh the list\n    } catch (error: any) {\n      const errorMessage = error.response?.data?.detail || \"Nie udało się anulować zadania\";\n      toast.error(errorMessage);\n      console.error(`Error cancelling task ${taskId}:`, error);\n    }\n  };\n\n  // Format date\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  // Get status badge variant\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"RUNNING\":\n        return \"default\";\n      case \"PENDING\":\n      case \"CONFIGURING\":\n        return \"secondary\";\n      case \"COMPLETED\":\n        return \"success\";\n      case \"ERROR\":\n      case \"ERROR_RETRY_1\":\n      case \"ERROR_RETRY_2\":\n      case \"ERROR_RETRY_3\":\n        return \"destructive\";\n      case \"CANCELLED\":\n      case \"TIMEOUT\":\n        return \"outline\";\n      default:\n        return \"secondary\";\n    }\n  };\n\n  // Filter tasks based on their status\n  const getFilteredTasks = useCallback(() => {\n    if (!tasks) return [];\n    \n    // Apply status filter if set\n    if (statusFilter) {\n      return tasks.filter(task => task.status === statusFilter);\n    }\n    \n    return tasks;\n  }, [tasks, statusFilter]);\n\n  // Get active tasks (PENDING, RUNNING, CONFIGURING)\n  const getActiveTasks = useCallback(() => {\n    return tasks.filter(task => \n      [\"PENDING\", \"RUNNING\", \"CONFIGURING\"].includes(task.status)\n    );\n  }, [tasks]);\n\n  // Get finished tasks (COMPLETED, ERROR, CANCELLED, etc.)\n  const getFinishedTasks = useCallback(() => {\n    return tasks.filter(task => \n      [\"COMPLETED\", \"ERROR\", \"ERROR_RETRY_1\", \"ERROR_RETRY_2\", \"ERROR_RETRY_3\", \"CANCELLED\", \"TIMEOUT\"].includes(task.status)\n    );\n  }, [tasks]);\n\n  // Auto-refresh\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Only auto-refresh if there are running or pending tasks\n      if (\n        tasks.some(\n          (task) =>\n            task.status === \"RUNNING\" ||\n            task.status === \"PENDING\" ||\n            task.status === \"CONFIGURING\"\n        )\n      ) {\n        fetchTasks();\n        fetchQueueStatus();\n      }\n    }, 10000); // Every 10 seconds\n\n    return () => clearInterval(interval);\n  }, [tasks, fetchTasks, fetchQueueStatus]);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold\">Kolejka zadań symulacji</h1>\n        <div className=\"flex gap-2\">\n          <Button \n            onClick={refreshData} \n            variant=\"outline\" \n            size=\"sm\"\n            disabled={isRefreshing}\n          >\n            <RefreshCcw className={`h-4 w-4 mr-2 ${isRefreshing ? \"animate-spin\" : \"\"}`} />\n            {isRefreshing ? \"Odświeżanie...\" : \"Odśwież\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* Queue status card */}\n      <Card>\n        <CardHeader className=\"pb-2\">\n          <CardTitle>Status kolejki</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {!queueStatus ? (\n            <div className=\"flex items-center\">\n              <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n              <p>Pobieranie statusu kolejki...</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"bg-muted/50 p-4 rounded-md\">\n                <p className=\"text-sm text-muted-foreground\">Zadań w kolejce</p>\n                <p className=\"text-2xl font-bold\">{queueStatus.total_tasks}</p>\n              </div>\n              <div className=\"bg-muted/50 p-4 rounded-md\">\n                <p className=\"text-sm text-muted-foreground\">Aktywne zadania</p>\n                <p className=\"text-2xl font-bold\">{queueStatus.status_counts.RUNNING || 0}</p>\n              </div>\n              <div className=\"bg-muted/50 p-4 rounded-md\">\n                <p className=\"text-sm text-muted-foreground\">Oczekujące zadania</p>\n                <p className=\"text-2xl font-bold\">{queueStatus.status_counts.PENDING || 0}</p>\n              </div>\n              <div className=\"bg-muted/50 p-4 rounded-md\">\n                <p className=\"text-sm text-muted-foreground\">Średni czas oczekiwania</p>\n                <p className=\"text-2xl font-bold\">\n                  {queueStatus.avg_wait_time \n                    ? `${Math.round(queueStatus.avg_wait_time / 60)} min` \n                    : \"N/A\"}\n                </p>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Separator />\n\n      <Tabs defaultValue=\"all-tasks\" className=\"w-full\">\n        <TabsList className=\"mb-4\">\n          <TabsTrigger value=\"all-tasks\">Wszystkie zadania</TabsTrigger>\n          <TabsTrigger value=\"active-tasks\">Zadania aktywne</TabsTrigger>\n          <TabsTrigger value=\"finished-tasks\">Zadania zakończone</TabsTrigger>\n          <TabsTrigger value=\"add-task\">Dodaj nowe zadanie</TabsTrigger>\n        </TabsList>\n\n        {/* Tab 1: All Tasks */}\n        <TabsContent value=\"all-tasks\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-2\">\n                <CardTitle>Wszystkie zadania symulacji</CardTitle>\n                <div className=\"flex flex-wrap gap-2\">\n                  <Button \n                    variant={statusFilter === null ? \"default\" : \"outline\"} \n                    size=\"sm\"\n                    onClick={() => setStatusFilter(null)}\n                  >\n                    Wszystkie\n                  </Button>\n                  <Button \n                    variant={statusFilter === \"RUNNING\" ? \"default\" : \"outline\"} \n                    size=\"sm\"\n                    onClick={() => setStatusFilter(\"RUNNING\")}\n                  >\n                    Aktywne\n                  </Button>\n                  <Button \n                    variant={statusFilter === \"PENDING\" ? \"default\" : \"outline\"} \n                    size=\"sm\"\n                    onClick={() => setStatusFilter(\"PENDING\")}\n                  >\n                    Oczekujące\n                  </Button>\n                  <Button \n                    variant={statusFilter === \"COMPLETED\" ? \"default\" : \"outline\"} \n                    size=\"sm\"\n                    onClick={() => setStatusFilter(\"COMPLETED\")}\n                  >\n                    Zakończone\n                  </Button>\n                  <Button \n                    variant={statusFilter === \"ERROR\" ? \"default\" : \"outline\"} \n                    size=\"sm\"\n                    onClick={() => setStatusFilter(\"ERROR\")}\n                  >\n                    Błędy\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"flex items-center justify-center py-6\">\n                  <Loader2 className=\"h-6 w-6 animate-spin mr-2\" />\n                  <p>Ładowanie zadań...</p>\n                </div>\n              ) : getFilteredTasks().length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <p>Brak zadań symulacji.</p>\n                  <p className=\"mt-2\">Użyj zakładki \"Dodaj nowe zadanie\", aby utworzyć symulację.</p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border-collapse\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left py-2\">ID</th>\n                        <th className=\"text-left py-2\">Nazwa</th>\n                        <th className=\"text-left py-2\">Status</th>\n                        <th className=\"text-left py-2\">Postęp</th>\n                        <th className=\"text-left py-2\">Plik symulacji</th>\n                        <th className=\"text-left py-2\">Węzeł</th>\n                        <th className=\"text-left py-2\">Utworzono</th>\n                        <th className=\"text-left py-2\">Akcje</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {getFilteredTasks().map((task) => (\n                        <tr key={task.id} className=\"border-b hover:bg-muted/50\">\n                          <td className=\"py-2\">{task.task_id}</td>\n                          <td className=\"py-2\">{task.name}</td>\n                          <td className=\"py-2\">\n                            <Badge variant={getStatusBadgeVariant(task.status)}>\n                              {task.status}\n                              {task.retry_count > 0 && ` (${task.retry_count})`}\n                            </Badge>\n                          </td>\n                          <td className=\"py-2 w-32\">\n                            {task.status === \"RUNNING\" && (\n                              <div className=\"flex items-center gap-2\">\n                                <Progress value={task.progress} className=\"w-full\" />\n                                <span className=\"text-xs\">{task.progress}%</span>\n                              </div>\n                            )}\n                          </td>\n                          <td className=\"py-2 truncate max-w-xs\" title={task.simulation_file}>\n                            {task.simulation_file.split('/').pop()}\n                          </td>\n                          <td className=\"py-2\">{task.node || 'Nie przypisano'}</td>\n                          <td className=\"py-2\">{formatDate(task.created_at)}</td>\n                          <td className=\"py-2\">\n                            <div className=\"flex gap-2\">\n                              <Link href={`/dashboard/task_queue/${task.id}`}>\n                                <Button variant=\"outline\" size=\"sm\">\n                                  <FileText className=\"h-4 w-4 mr-1\" />\n                                  Szczegóły\n                                </Button>\n                              </Link>\n                              {(task.status === \"PENDING\" || \n                                task.status === \"RUNNING\" || \n                                task.status === \"CONFIGURING\") && (\n                                <Button \n                                  variant=\"destructive\" \n                                  size=\"sm\"\n                                  onClick={() => cancelTask(task.id)} // Changed from task.task_id to task.id\n                                >\n                                  Anuluj\n                                </Button>\n                              )}\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Tab 2: Active Tasks */}\n        <TabsContent value=\"active-tasks\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle>Zadania aktywne</CardTitle>\n              <CardDescription>\n                Zadania w trakcie wykonywania lub oczekujące w kolejce\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"flex items-center justify-center py-6\">\n                  <Loader2 className=\"h-6 w-6 animate-spin mr-2\" />\n                  <p>Ładowanie zadań...</p>\n                </div>\n              ) : getActiveTasks().length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <p>Brak aktywnych zadań.</p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border-collapse\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left py-2\">ID</th>\n                        <th className=\"text-left py-2\">Nazwa</th>\n                        <th className=\"text-left py-2\">Status</th>\n                        <th className=\"text-left py-2\">Postęp</th>\n                        <th className=\"text-left py-2\">Plik symulacji</th>\n                        <th className=\"text-left py-2\">Węzeł</th>\n                        <th className=\"text-left py-2\">Utworzono</th>\n                        <th className=\"text-left py-2\">Akcje</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {getActiveTasks().map((task) => (\n                        <tr key={task.id} className=\"border-b hover:bg-muted/50\">\n                          <td className=\"py-2\">{task.task_id}</td>\n                          <td className=\"py-2\">{task.name}</td>\n                          <td className=\"py-2\">\n                            <Badge variant={getStatusBadgeVariant(task.status)}>\n                              {task.status}\n                              {task.retry_count > 0 && ` (${task.retry_count})`}\n                            </Badge>\n                          </td>\n                          <td className=\"py-2 w-32\">\n                            {task.status === \"RUNNING\" && (\n                              <div className=\"flex items-center gap-2\">\n                                <Progress value={task.progress} className=\"w-full\" />\n                                <span className=\"text-xs\">{task.progress}%</span>\n                              </div>\n                            )}\n                          </td>\n                          <td className=\"py-2 truncate max-w-xs\" title={task.simulation_file}>\n                            {task.simulation_file.split('/').pop()}\n                          </td>\n                          <td className=\"py-2\">{task.node || 'Nie przypisano'}</td>\n                          <td className=\"py-2\">{formatDate(task.created_at)}</td>\n                          <td className=\"py-2\">\n                            <div className=\"flex gap-2\">\n                              <Link href={`/dashboard/task_queue/${task.id}`}>\n                                <Button variant=\"outline\" size=\"sm\">\n                                  <FileText className=\"h-4 w-4 mr-1\" />\n                                  Szczegóły\n                                </Button>\n                              </Link>\n                              {(task.status === \"PENDING\" || \n                                task.status === \"RUNNING\" || \n                                task.status === \"CONFIGURING\") && (\n                                <Button \n                                  variant=\"destructive\" \n                                  size=\"sm\"\n                                  onClick={() => cancelTask(task.id)} // Changed from task.task_id to task.id\n                                >\n                                  Anuluj\n                                </Button>\n                              )}\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Tab 3: Finished Tasks */}\n        <TabsContent value=\"finished-tasks\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle>Zadania zakończone</CardTitle>\n              <CardDescription>\n                Zadania zakończone, anulowane lub zakończone błędem\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"flex items-center justify-center py-6\">\n                  <Loader2 className=\"h-6 w-6 animate-spin mr-2\" />\n                  <p>Ładowanie zadań...</p>\n                </div>\n              ) : getFinishedTasks().length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <p>Brak zakończonych zadań.</p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border-collapse\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left py-2\">ID</th>\n                        <th className=\"text-left py-2\">Nazwa</th>\n                        <th className=\"text-left py-2\">Status</th>\n                        <th className=\"text-left py-2\">Plik symulacji</th>\n                        <th className=\"text-left py-2\">Zakończone</th>\n                        <th className=\"text-left py-2\">Akcje</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {getFinishedTasks().map((task) => (\n                        <tr key={task.id} className=\"border-b hover:bg-muted/50\">\n                          <td className=\"py-2\">{task.task_id}</td>\n                          <td className=\"py-2\">{task.name}</td>\n                          <td className=\"py-2\">\n                            <Badge variant={getStatusBadgeVariant(task.status)}>\n                              {task.status}\n                              {task.retry_count > 0 && ` (${task.retry_count})`}\n                            </Badge>\n                          </td>\n                          <td className=\"py-2 truncate max-w-xs\" title={task.simulation_file}>\n                            {task.simulation_file.split('/').pop()}\n                          </td>\n                          <td className=\"py-2\">{formatDate(task.created_at)}</td>\n                          <td className=\"py-2\">\n                            <div className=\"flex gap-2\">\n                              <Link href={`/dashboard/task_queue/${task.id}`}>\n                                <Button variant=\"outline\" size=\"sm\">\n                                  <FileText className=\"h-4 w-4 mr-1\" />\n                                  Szczegóły\n                                </Button>\n                              </Link>\n                              {(task.status === \"PENDING\" || \n                                task.status === \"RUNNING\" || \n                                task.status === \"CONFIGURING\") && (\n                                <Button \n                                  variant=\"destructive\" \n                                  size=\"sm\"\n                                  onClick={() => cancelTask(task.id)} // Changed from task.task_id to task.id\n                                >\n                                  Anuluj\n                                </Button>\n                              )}\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Tab 4: Add New Task form */}\n        <TabsContent value=\"add-task\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Dodaj nowe zadanie symulacji</CardTitle>\n              <CardDescription>\n                Wypełnij formularz, aby utworzyć nowe zadanie symulacji Mumax3\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nazwa zadania</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"np. Resonator FMR\" {...field} />\n                        </FormControl>\n                        <FormDescription>\n                          Opisowa nazwa zadania symulacji\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"simulation_file\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Ścieżka do pliku .mx3</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"/mnt/local/kkingstoun/admin/pcss_storage/mannga/path/to/file.mx3\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Pełna ścieżka do pliku symulacji w kontenerze\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"partition\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Partycja SLURM</FormLabel>\n                          <FormControl>\n                            <select\n                              className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                              {...field}\n                            >\n                              <option value=\"proxima\">proxima</option>\n                              <option value=\"a100\">a100</option>\n                              <option value=\"standard\">standard</option>\n                            </select>\n                          </FormControl>\n                          <FormDescription>\n                            Partycja SLURM dla zadania\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"priority\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Priorytet</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" min={0} max={100} {...field} />\n                          </FormControl>\n                          <FormDescription>\n                            Priorytet zadania (0-100, wyższy = ważniejszy)\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"num_cpus\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Liczba CPU</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" min={1} max={128} {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"memory_gb\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Pamięć RAM (GB)</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" min={4} max={1024} {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"num_gpus\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Liczba GPU</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" min={0} max={8} {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"time_limit\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Limit czasu</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"24:00:00\" {...field} />\n                        </FormControl>\n                        <FormDescription>\n                          Format: godziny:minuty:sekundy (np. 24:00:00 dla 24 godzin)\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button type=\"submit\" disabled={isSubmitting}>\n                    {isSubmitting ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Wysyłanie...\n                      </>\n                    ) : (\n                      <>\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Dodaj zadanie\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n            <CardFooter className=\"bg-muted/50 text-sm text-muted-foreground\">\n              <div className=\"space-y-2\">\n                <p>\n                  <span className=\"font-semibold\">Uwaga:</span> Zadanie zostanie dodane do kolejki i wykonane, gdy dostępne będą zasoby.\n                </p>\n                <p>\n                  Symulacja zostanie wykonana na klastrze z użyciem programu Mumax3 z podanymi parametrami.\n                </p>\n              </div>\n            </CardFooter>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/app/login/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Image' is defined but never used.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'redirect' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoading' is assigned a value but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsLoading' is assigned a value but never used.","line":12,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleSubmit' is assigned a value but never used.","line":63,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":21}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport Image from \"next/image\";\nimport { redirect } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\nimport { LoginForm } from \"@/components/auth/login-form\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { authApi } from \"@/lib/api-client\";\nimport { Toaster } from \"@/components/ui/sonner\";\n\nexport default function LoginPage() {\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Add logic to check for redirect after successful login\n  const handleLoginSuccess = () => {\n    // Check if there's a stored redirect path\n    const redirectPath = localStorage.getItem('login_redirect');\n    \n    if (redirectPath) {\n      // Clear the stored path\n      localStorage.removeItem('login_redirect');\n      // Redirect to the stored path\n      window.location.href = redirectPath;\n    } else {\n      // Default redirect to dashboard\n      window.location.href = '/dashboard';\n    }\n  };\n  \n  // Handle login form submission\n  const handleLogin = async (values: { username: string; password: string }) => {\n    try {\n      const response = await authApi.login(values.username, values.password);\n      \n      // After successful login, save user data\n      if (response && response.data) {\n        const userData = response.data;\n        \n        // Add full name if we have first/last name data\n        if (!userData.full_name && (userData.first_name || userData.last_name)) {\n          const firstName = userData.first_name || '';\n          const lastName = userData.last_name || '';\n          userData.full_name = `${firstName} ${lastName}`.trim();\n        }\n        \n        // Save token\n        localStorage.setItem('auth_token', userData.token || userData.access_token);\n        \n        // Save user data\n        localStorage.setItem('user_data', JSON.stringify(userData));\n        localStorage.setItem('user_data_timestamp', Date.now().toString());\n        \n        // Use the success handler to redirect\n        handleLoginSuccess();\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  };\n  \n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const values = {\n      username: formData.get('username') as string,\n      password: formData.get('password') as string,\n    };\n    \n    try {\n      await handleLogin(values);\n    } catch (error) {\n      console.error('Submit error:', error);\n    }\n  };\n  \n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center bg-muted/40\">\n      <Toaster position=\"top-center\" />\n      <div className=\"mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]\">\n        <div className=\"flex flex-col space-y-2 text-center\">\n          <h1 className=\"text-2xl font-semibold tracking-tight\">\n            SLURM Container Manager\n          </h1>\n          <p className=\"text-sm text-muted-foreground\">\n            Zaloguj się, aby zarządzać kontenerami na klastrze obliczeniowym\n          </p>\n        </div>\n\n        <Card className=\"sm:shadow-md\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl\">Logowanie</CardTitle>\n            <CardDescription>\n              Wprowadź swoje dane logowania\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"grid gap-4\">\n            <LoginForm onSubmit={handleLogin} />\n          </CardContent>\n          <CardFooter className=\"flex flex-col\">\n            <p className=\"px-8 text-center text-sm text-muted-foreground\">\n              System zarządzania kontenerami na klastrze PCSS\n            </p>\n          </CardFooter>\n        </Card>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/app/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'redirect' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useEffect } from \"react\";\nimport { redirect } from \"next/navigation\";\nimport { authApi } from \"@/lib/api-client\";\n\nexport default function Home() {\n  useEffect(() => {\n    // Sprawdź stan przed przekierowaniem\n    const checkAuth = () => {\n      if (authApi.isAuthenticated()) {\n        window.location.href = \"/dashboard\";\n      } else {\n        window.location.href = \"/login\";\n      }\n    };\n    \n    // Użyj window.location.href zamiast router.push aby wymusić pełne odświeżenie strony\n    checkAuth();\n  }, []);\n\n  return (\n    <div className=\"flex h-screen w-full items-center justify-center\">\n      <div className=\"text-center\">\n        <div className=\"mb-4\">\n          <div className=\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent\" />\n        </div>\n        <p>Przekierowywanie...</p>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/components/auth/login-form.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1241,1244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1241,1244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport { useState } from \"react\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\nimport { useRouter } from \"next/navigation\";\nimport { Loader2 } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { authApi } from \"@/lib/api-client\";\nimport { toast } from \"sonner\";\n\nconst formSchema = z.object({\n  username: z.string().min(1, \"Nazwa użytkownika jest wymagana\"),\n  password: z.string().min(1, \"Hasło jest wymagane\"),\n});\n\nexport function LoginForm() {\n  const router = useRouter();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsLoading(true);\n    try {\n      await authApi.login(values.username, values.password);\n      toast.success(\"Zalogowano pomyślnie\");\n      router.push(\"/dashboard\");\n    } catch (error: any) {\n      toast.error(\n        error.response?.data?.detail || \"Błąd logowania. Sprawdź dane i spróbuj ponownie.\"\n      );\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"username\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Nazwa użytkownika</FormLabel>\n              <FormControl>\n                <Input placeholder=\"admin\" {...field} disabled={isLoading} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Hasło</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"password\" \n                  placeholder=\"••••••••\" \n                  {...field} \n                  disabled={isLoading} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n          {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n          Zaloguj się\n        </Button>\n      </form>\n    </Form>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/lib/api-client.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":256,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8009,8012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8009,8012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":281,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8919,8922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8919,8922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":310,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9719,9722],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9719,9722],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios, { AxiosInstance } from 'axios';\nimport { toast } from \"sonner\"; // Dodajemy import toast\n\n// CLI Token Types\nexport interface CLIToken {\n  id: number;\n  name: string;\n  user_id: number;\n  created_at: string;\n  expires_at: string;\n  last_used_at?: string;\n  last_used_ip?: string;\n  last_used_user_agent?: string;\n  is_active: boolean;\n}\n\nexport interface CLITokenCreate {\n  name: string;\n  expires_days?: number;\n}\n\nexport interface CLITokenUpdate {\n  name?: string;\n  expires_days?: number;\n}\n\nexport interface CLITokenCreateResponse {\n  token: string;\n  token_info: CLIToken;\n}\n\nexport interface CLITokenUsageInfo {\n  last_used_at?: string;\n  last_used_ip?: string;\n  last_used_user_agent?: string;\n  is_active: boolean;\n}\n\n// Configuration\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || \"https://amucontainers.orion.zfns.eu.org\";\nconst API_PREFIX = \"/api/v1\";\n\n// Create a single axios instance\nconst apiClient: AxiosInstance = axios.create({\n  baseURL: `${API_URL}${API_PREFIX}`,\n  withCredentials: true,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Request interceptor to add auth token\napiClient.interceptors.request.use(\n  (config) => {\n    const token = typeof window !== \"undefined\" ? localStorage.getItem(\"auth_token\") : null;\n    \n    if (token) {\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n    \n    // Ensure credentials are always included\n    config.withCredentials = true;\n    \n    return config;\n  },\n  (error) => {\n    console.error('Request interceptor error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Remove duplicate response interceptors and implement a single consolidated one\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('--- Axios Error Interceptor Start ---');\n    console.error('Error Message:', error.message);\n    console.error('Error Name:', error.name);\n    console.error('Error Code:', error.code);\n\n    if (error.config) {\n      console.error('Axios Request Config:', {\n        url: error.config.url,\n        method: error.config.method,\n        headers: error.config.headers,\n        data: error.config.data,\n        timeout: error.config.timeout,\n        baseURL: error.config.baseURL,\n      });\n    } else {\n      console.error('Axios Request Config: IS UNDEFINED OR NULL');\n    }\n\n    if (error.response) {\n      console.error('Axios Response:', {\n        status: error.response.status,\n        statusText: error.response.statusText,\n        headers: error.response.headers,\n        data: error.response.data,\n      });\n\n      if (error.response.status === 401 || error.response.status === 403) {\n        // Sprawdź czy komunikat błędu zawiera \"Could not validate credentials\"\n        const errorDetail = error.response.data?.detail;\n        if (typeof errorDetail === 'string' && errorDetail.includes(\"Could not validate credentials\")) {\n          console.error('Authentication error: Token invalid or expired');\n          \n          // Wyloguj użytkownika - wyczyść localStorage\n          localStorage.removeItem('auth_token');\n          localStorage.removeItem('user_data');\n          localStorage.removeItem('user_data_timestamp');\n          \n          // Powiadom użytkownika\n          if (typeof window !== \"undefined\") {\n            toast.error(\"Sesja wygasła. Wymagane ponowne logowanie.\", {\n              duration: 8000,\n              closeButton: true\n            });\n          }\n          \n          // Przekieruj na stronę logowania\n          if (typeof window !== \"undefined\") {\n            // Zachowaj aktualną ścieżkę, aby móc wrócić po zalogowaniu\n            const currentPath = window.location.pathname;\n            if (currentPath !== '/login' && !currentPath.includes('/logout')) {\n              localStorage.setItem('login_redirect', currentPath);\n            }\n            \n            // Przekieruj na stronę logowania\n            window.location.href = '/login';\n          }\n        }\n      } else if (error.response.status === 500) {\n        // Specjalna obsługa dla błędu 500\n        console.error('INTERNAL SERVER ERROR (500). Response data:', error.response.data);\n        // Tutaj możesz wyświetlić użytkownikowi generyczny komunikat\n        if (typeof window !== \"undefined\") {\n          toast.error(\"Wystąpił wewnętrzny błąd serwera. Spróbuj ponownie później.\", {\n            duration: 8000,\n            closeButton: true\n          });\n        }\n      } else {\n        console.error('Other API error response. Status:', error.response.status, 'Data:', error.response.data);\n      }\n    } else if (error.request) {\n      console.error('No response received. Request object:', error.request);\n    } else {\n      console.error('Request setup error (no response, no request).');\n    }\n    console.error('Error Stack:', error.stack);\n    console.error('--- Axios Error Interceptor End ---');\n\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authApi = {\n  login: async (username: string, password: string) => {\n    const params = new URLSearchParams();\n    params.append(\"username\", username);\n    params.append(\"password\", password);\n    \n    try {\n      const response = await apiClient.post(`/auth/login`, params, {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n      });\n      \n      if (response.data.access_token) {\n        localStorage.setItem(\"auth_token\", response.data.access_token);\n      }\n      \n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  \n  async logout() {\n    try {\n      // Najpierw próbujemy wywołać endpoint wylogowania po stronie serwera\n      await fetch('/auth/logout', {\n        method: 'POST',\n        credentials: 'include', // ważne aby wysłać cookies\n      });\n    } catch (error) {\n      console.error('Backend logout failed:', error);\n    }\n    \n    // Wyczyść localStorage\n    localStorage.clear(); // Czyści całe localStorage zamiast tylko jednego klucza\n    \n    // Wyczyść sessionStorage\n    sessionStorage.clear();\n    \n    // Wyczyść wszystkie cookies\n    document.cookie.split(';').forEach(cookie => {\n      const [name] = cookie.trim().split('=');\n      document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=${window.location.hostname}`;\n    });\n    \n    // Resetuj stan Axios jeśli używany\n    // Remove Authorization header from the apiClient instance\n    delete apiClient.defaults.headers.common['Authorization'];\n    \n    return true;\n  },\n  \n  isAuthenticated() {\n    // Logujemy wszystkie klucze w localStorage do celów debugowania\n    console.log('All localStorage keys:', Object.keys(localStorage));\n    \n    // Sprawdzamy różne możliwe nazwy tokenów\n    const auth_token = localStorage.getItem('auth_token');\n    const token = localStorage.getItem('token');\n    const jwt = localStorage.getItem('jwt');\n    const accessToken = localStorage.getItem('accessToken');\n    \n    console.log('Potential tokens found:', { auth_token, token, jwt, accessToken });\n    \n    // Zwracamy true, jeśli którykolwiek token istnieje\n    return !!(auth_token || token || jwt || accessToken);\n  },\n  \n// Zmodyfikuj funkcję logout, aby była bardziej skuteczna\n  };\n\n// User API\nexport const userApi = {\n  // Pobiera dane bieżącego użytkownika\n  getCurrentUser: () => apiClient.get('/users/me'),\n  // Aktualizuje dane bieżącego użytkownika, w tym hasło code_server\n  updateCurrentUser: (userData: { code_server_password?: string }) => {\n    return apiClient.put('/users/me', userData)\n  },\n}\n\nexport const tasksApi = {\n  // Get all tasks\n  getTasks: () => apiClient.get('/tasks/'),\n\n  // Get active tasks\n  getActiveTasks: () => apiClient.get('/tasks/active-tasks'),\n\n  // Get task details\n  getTask: (taskId: number) => apiClient.get(`/tasks/${taskId}`),\n\n  // Get task status\n  getTaskStatus: (taskId: number) => apiClient.get(`/tasks/${taskId}/status`),\n\n  // Submit new task\n  createTask: (taskData: { [key: string]: any }) => apiClient.post('/tasks/', taskData),\n  \n  // Get available templates\n  getTemplates: () => apiClient.get('/tasks/templates'),\n\n  // Get queue status (renamed from getClusterStatus)\n  getQueueStatus: () => apiClient.get('/tasks/status'),\n\n  // Get code server URL\n  getCodeServerUrl: (taskId: number) => apiClient.get(`/tasks/${taskId}/code-server`),\n\n  // Delete task\n  deleteTask: (taskId: number) => apiClient.delete(`/tasks/${taskId}`),\n\n  // Get SSH tunnels for task\n  getTaskTunnels: (taskId: number) => apiClient.get(`/tasks/${taskId}/tunnels`),\n\n  // Create SSH tunnel for task\n  createTaskTunnel: (taskId: number) => apiClient.post(`/tasks/${taskId}/tunnels`),\n\n  // Close SSH tunnel\n  closeTaskTunnel: (taskId: number, tunnelId: number) =>\n    apiClient.delete(`/tasks/${taskId}/tunnels/${tunnelId}`),\n\n  // Update task - new method\n  updateTask: (taskId: number, taskData: { [key: string]: any }) => \n    apiClient.put(`/tasks/${taskId}`, taskData),\n  \n  // Get task results - new method\n  getTaskResults: (taskId: number) => apiClient.get(`/tasks/${taskId}/results`),\n  \n  // Cancel task - new method\n  cancelTask: (taskId: number) => apiClient.post(`/tasks/${taskId}/cancel`),\n  \n  // Process queue - new method\n  processQueue: () => apiClient.post('/tasks/process')\n};\n\n\n\nexport const jobsApi = {\n  // Get all jobs\n  getJobs: () => apiClient.get('/jobs/'),\n  \n  // Get active jobs\n  getActiveJobs: () => apiClient.get('/jobs/active-jobs'),\n  \n  // Get job details\n  getJob: (jobId: number) => apiClient.get(`/jobs/${jobId}`),\n  \n  // Get job status\n  getJobStatus: (jobId: number) => apiClient.get(`/jobs/${jobId}/status`),\n  \n  // Submit new job\n  createJob: (jobData: { [key: string]: any }) => apiClient.post('/jobs/', jobData),\n  \n  // Get available templates\n  getTemplates: () => apiClient.get('/jobs/templates'),\n  \n  // Check cluster status\n  getClusterStatus: () => apiClient.get('/jobs/status'),\n  \n  // Get code server URL\n  getCodeServerUrl: (jobId: number) => apiClient.get(`/jobs/${jobId}/code-server`),\n\n  // Delete job\n  deleteJob: (jobId: number) => apiClient.delete(`/jobs/${jobId}`),\n  \n  // Get SSH tunnels for job\n  getJobTunnels: (jobId: number) => apiClient.get(`/jobs/${jobId}/tunnels`),\n  \n  // Create SSH tunnel for job\n  createJobTunnel: (jobId: number) => apiClient.post(`/jobs/${jobId}/tunnels`),\n  \n  // Close SSH tunnel\n  closeJobTunnel: (jobId: number, tunnelId: number) => \n    apiClient.delete(`/jobs/${jobId}/tunnels/${tunnelId}`),\n};\n\n// CLI Tokens API\nexport const cliTokensApi = {\n  // Get all CLI tokens for current user\n  getTokens: (): Promise<{ data: CLIToken[] }> => \n    apiClient.get('/cli-tokens/'),\n  \n  // Create new CLI token\n  createToken: (tokenData: CLITokenCreate): Promise<{ data: CLITokenCreateResponse }> => \n    apiClient.post('/cli-tokens/', tokenData),\n  \n  // Get specific CLI token\n  getToken: (tokenId: number): Promise<{ data: CLIToken }> => \n    apiClient.get(`/cli-tokens/${tokenId}`),\n  \n  // Update CLI token (rename or extend expiration)\n  updateToken: (tokenId: number, tokenData: CLITokenUpdate): Promise<{ data: CLIToken }> => \n    apiClient.put(`/cli-tokens/${tokenId}`, tokenData),\n  \n  // Delete CLI token permanently\n  deleteToken: (tokenId: number) => \n    apiClient.delete(`/cli-tokens/${tokenId}`),\n  \n  // Deactivate CLI token (soft delete)\n  deactivateToken: (tokenId: number) => \n    apiClient.post(`/cli-tokens/${tokenId}/deactivate`),\n  \n  // Get CLI token usage information\n  getTokenUsage: (tokenId: number): Promise<{ data: CLITokenUsageInfo }> => \n    apiClient.get(`/cli-tokens/${tokenId}/usage`),\n  \n  // Cleanup expired tokens (admin only)\n  cleanupExpiredTokens: () => \n    apiClient.post('/cli-tokens/cleanup-expired'),\n};\n\nexport default apiClient;","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/lib/nav-user.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconCreditCard' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconNotification' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IconUserCircle' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AvatarImage' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DropdownMenuGroup' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":20}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport {\n  IconCreditCard,\n  IconDotsVertical,\n  IconLogout,\n  IconNotification,\n  IconUserCircle,\n} from \"@tabler/icons-react\"\n\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/new-york-v4/ui/avatar\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/registry/new-york-v4/ui/dropdown-menu\"\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/registry/new-york-v4/ui/sidebar\"\nimport { authApi } from \"@/lib/api-client\"\nimport { useRouter } from \"next/navigation\"\nimport { useState, useEffect } from \"react\"\n\n// Define a proper type for the user object\ninterface UserData {\n  username: string;\n  email: string;\n  avatar?: string;\n  // Add other user properties as needed\n}\n\nexport function NavUser({\n  user: initialUser,\n}: {\n  user: {\n    name: string;\n    email: string;\n    avatar: string;\n  }\n}) {\n  const { isMobile } = useSidebar()\n  const router = useRouter()\n  \n  // Use properly typed state for user data\n  const [user, setUser] = useState<UserData | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  // Initialize with the passed-in user data\n  useEffect(() => {\n    // Convert the initial user format to our UserData format\n    if (initialUser) {\n      setUser({\n        username: initialUser.name,\n        email: initialUser.email,\n        avatar: initialUser.avatar\n      });\n    }\n    setLoading(false);\n  }, [initialUser]);\n\n  if (loading || !user) {\n    return null;\n  }\n\n  const handleLogout = () => {\n    authApi.logout();\n    router.push('/login');\n  };\n\n  // Safely access user properties with null check\n  const userInitials = user?.username ? user.username.slice(0, 2).toUpperCase() : \"NA\";\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n            >\n              <Avatar className=\"h-8 w-8 rounded-lg grayscale\">\n                <AvatarFallback className=\"rounded-lg\">{userInitials}</AvatarFallback>\n              </Avatar>\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                <span className=\"truncate font-medium\">{user.username}</span>\n                <span className=\"text-muted-foreground truncate text-xs\">\n                  {user.email}\n                </span>\n              </div>\n              <IconDotsVertical className=\"ml-auto size-4\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            className=\"w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg\"\n            side={isMobile ? \"bottom\" : \"right\"}\n            align=\"end\"\n            sideOffset={4}\n          >\n            <DropdownMenuLabel className=\"p-0 font-normal\">\n              <div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n                <Avatar className=\"h-8 w-8 rounded-lg\">\n                  <AvatarFallback className=\"rounded-lg\">{userInitials}</AvatarFallback>\n                </Avatar>\n                <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                  <span className=\"truncate font-medium\">{user.username}</span>\n                  <span className=\"text-muted-foreground truncate text-xs\">\n                    {user.email}\n                  </span>\n                </div>\n              </div>\n            </DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem onClick={handleLogout}>\n              <IconLogout className=\"mr-2 size-4\" />\n              Log out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/lib/page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.","line":69,"column":6,"nodeType":"ArrayExpression","endLine":69,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [form]","fix":{"range":[1964,1966],"text":"[form]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2386,2389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2386,2389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\nimport { toast } from \"sonner\"\nimport { Loader2, Eye, EyeOff } from \"lucide-react\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { userApi } from \"@/lib/api-client\"\n\nconst formSchema = z.object({\n  code_server_password: z.string()\n    .min(5, \"Hasło musi mieć minimum 5 znaków\")\n    .max(50, \"Hasło nie może przekraczać 50 znaków\"),\n})\n\nexport default function SettingsPage() {\n  const [isLoading, setIsLoading] = useState(false)\n  const [currentPassword, setCurrentPassword] = useState(\"\")\n  const [showPassword, setShowPassword] = useState(false)\n  const [isEditing, setIsEditing] = useState(false)\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: { code_server_password: \"\" }\n  })\n\n  // Pobierz dane użytkownika przy pierwszym renderowaniu - podobnie jak w jobsApi\n  useEffect(() => {\n    async function fetchUserData() {\n      try {\n        setIsLoading(true)\n        const response = await userApi.getCurrentUser()\n        const userData = response.data\n        \n        if (userData.code_server_password) {\n          setCurrentPassword(userData.code_server_password)\n          form.setValue(\"code_server_password\", userData.code_server_password)\n        }\n      } catch (error) {\n        toast.error(\"Nie udało się pobrać ustawień użytkownika\")\n        console.error(error)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n    \n    fetchUserData()\n  }, [])\n\n  // Obsługa formularza - analogiczna do obsługi w jobsApi\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsLoading(true)\n    try {\n      await userApi.updateCurrentUser({ \n        code_server_password: values.code_server_password \n      })\n      setCurrentPassword(values.code_server_password)\n      setIsEditing(false)\n      toast.success(\"Hasło zostało zaktualizowane\")\n    } catch (error: any) {\n      toast.error(\n        error.response?.data?.detail || \"Wystąpił błąd podczas aktualizacji hasła\"\n      )\n      console.error(error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold\">Ustawienia użytkownika</h1>\n      </div>\n\n      <Separator />\n\n      <div className=\"grid gap-6\">\n        <Card className=\"max-w-2xl\">\n          <CardHeader>\n            <CardTitle>Ustawienia Code Server</CardTitle>\n            <CardDescription>\n              Zarządzaj hasłem do Code Server używanym przy uruchamianiu kontenerów\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Bieżące hasło */}\n            <div className=\"space-y-2\">\n              <h3 className=\"text-sm font-medium\">Bieżące hasło Code Server:</h3>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"flex-1 rounded-md border p-2 bg-muted/50\">\n                  {showPassword ? currentPassword : '••••••••'}\n                </div>\n                <Button \n                  variant=\"outline\" \n                  size=\"icon\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  title={showPassword ? \"Ukryj hasło\" : \"Pokaż hasło\"}\n                >\n                  {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </Button>\n              </div>\n            </div>\n\n            {/* Formularz zmiany hasła */}\n            {!isEditing ? (\n              <Button onClick={() => setIsEditing(true)}>Zmień hasło</Button>\n            ) : (\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"code_server_password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nowe hasło Code Server</FormLabel>\n                        <FormControl>\n                          <Input \n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Wprowadź nowe hasło\" \n                            {...field} \n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Hasło musi mieć co najmniej 5 znaków.\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex gap-2\">\n                    <Button type=\"submit\" disabled={isLoading}>\n                      {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                      Zapisz hasło\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => {\n                        form.reset({ code_server_password: currentPassword })\n                        setIsEditing(false)\n                      }}\n                    >\n                      Anuluj\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            )}\n            \n            <div className=\"text-sm text-muted-foreground\">\n              <p>To hasło będzie używane do logowania do interfejsu Code Server we wszystkich Twoich kontenerach.</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/lib/registry.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":4,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[148,151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[148,151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[549,552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[549,552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Replace the problematic import with a type definition\n// import { Index } from \"@/__registry__\"\nconst registryItemSchema = {\n  safeParse: (item: any) => {\n    // Mock validation logic\n    const isValid = item && Array.isArray(item.files);\n    return isValid ? { success: true, data: item } : { success: false, error: { message: \"Invalid schema\" } };\n  },\n};\n\n// Define the Index type structure to replace the missing import\ntype RegistryItem = {\n  name: string;\n  type: string;\n  registryDependencies?: string[];\n  component: React.ComponentType<any>;\n  files: { name: string; content: string }[];\n}\n\ntype Index = Record<string, RegistryItem>;\n\n// Use our defined type instead of the missing import\nconst memoizedIndex: Index = {}; // Initialize an empty object or populate it with actual data\n\nexport function getRegistryComponent(name: string) {\n  return memoizedIndex[name]?.component\n}\n\nexport async function getRegistryItem(name: string) {\n  const item = memoizedIndex[name]\n\n  if (!item) {\n    return null\n  }\n\n  // Convert all file paths to object.\n  // TODO: remove when we migrate to new registry.\n  item.files = item.files.map((file: unknown) =>\n    typeof file === \"string\"\n      ? { name: file, content: \"\" }\n      : (file as { name: string; content: string })\n  )\n\n  // Fail early before doing expensive file operations.\n  const result = registryItemSchema.safeParse(item)\n  if (!result.success) {\n    return null\n  }\n\n  const files: typeof result.data.files = []\n  // for (const file of item.files) {\n  //   const content = await getFileContent(file)\n  //   const relativePath = path.relative(process.cwd(), file.path)\n\n  //   files.push({\n  //     ...file,\n  //     path: relativePath,\n  //     content,\n  //   })\n  // }\n\n  // Get meta.\n  // Assume the first file is the main file.\n  // const meta = await getFileMeta(files[0].path)\n\n  // Fix file paths.\n  // files = fixFilePaths(files)\n\n  const parsed = registryItemSchema.safeParse({\n    ...result.data,\n    files,\n    // meta,\n  })\n\n  if (!parsed.success) {\n    return null\n  }\n\n  return parsed.data\n}\n\nexport function fixImport(content: string) {\n  const regex = /@\\/(.+?)\\/((?:.*?\\/)?(?:components|ui|hooks|lib))\\/([\\w-]+)/g\n\n  const replacement = (\n    match: string,\n    path: string,\n    type: string,\n    component: string\n  ) => {\n    if (type.endsWith(\"components\")) {\n      return `@/components/${component}`\n    } else if (type.endsWith(\"ui\")) {\n      return `@/components/ui/${component}`\n    } else if (type.endsWith(\"hooks\")) {\n      return `@/hooks/${component}`\n    } else if (type.endsWith(\"lib\")) {\n      return `@/lib/${component}`\n    }\n\n    return match\n  }\n\n  return content.replace(regex, replacement)\n}\n\nexport type FileTree = {\n  name: string\n  path?: string\n  children?: FileTree[]\n}\n\nexport function createFileTreeForRegistryItemFiles(\n  files: Array<{ path: string; target?: string }>\n) {\n  const root: FileTree[] = []\n\n  for (const file of files) {\n    const path = file.target ?? file.path\n    const parts = path.split(\"/\")\n    let currentLevel = root\n\n    for (let i = 0; i < parts.length; i++) {\n      const part = parts[i]\n      const isFile = i === parts.length - 1\n      const existingNode = currentLevel.find((node) => node.name === part)\n\n      if (existingNode) {\n        if (isFile) {\n          // Update existing file node with full path\n          existingNode.path = path\n        } else {\n          // Move to next level in the tree\n          currentLevel = existingNode.children!\n        }\n      } else {\n        const newNode: FileTree = isFile\n          ? { name: part, path }\n          : { name: part, children: [] }\n\n        currentLevel.push(newNode)\n\n        if (!isFile) {\n          currentLevel = newNode.children!\n        }\n      }\n    }\n  }\n\n  return root\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/registry/new-york-v4/blocks/login-02/page.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":24,"column":9,"nodeType":"JSXOpeningElement","endLine":28,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GalleryVerticalEnd } from \"lucide-react\"\n\nimport { LoginForm } from \"@/registry/new-york-v4/blocks/login-02/components/login-form\"\n\nexport default function LoginPage() {\n  return (\n    <div className=\"grid min-h-svh lg:grid-cols-2\">\n      <div className=\"flex flex-col gap-4 p-6 md:p-10\">\n        <div className=\"flex justify-center gap-2 md:justify-start\">\n          <a href=\"#\" className=\"flex items-center gap-2 font-medium\">\n            <div className=\"bg-primary text-primary-foreground flex size-6 items-center justify-center rounded-md\">\n              <GalleryVerticalEnd className=\"size-4\" />\n            </div>\n            Acme Inc.\n          </a>\n        </div>\n        <div className=\"flex flex-1 items-center justify-center\">\n          <div className=\"w-full max-w-xs\">\n            <LoginForm />\n          </div>\n        </div>\n      </div>\n      <div className=\"bg-muted relative hidden lg:block\">\n        <img\n          src=\"/placeholder.svg\"\n          alt=\"Image\"\n          className=\"absolute inset-0 h-full w-full object-cover dark:brightness-[0.2] dark:grayscale\"\n        />\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/registry/new-york-v4/blocks/login-04/components/login-form.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":90,"column":13,"nodeType":"JSXOpeningElement","endLine":94,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from \"@/registry/new-york-v4/lib/utils\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\nimport { Card, CardContent } from \"@/registry/new-york-v4/ui/card\"\nimport { Input } from \"@/registry/new-york-v4/ui/input\"\nimport { Label } from \"@/registry/new-york-v4/ui/label\"\n\nexport function LoginForm({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div className={cn(\"flex flex-col gap-6\", className)} {...props}>\n      <Card className=\"overflow-hidden p-0\">\n        <CardContent className=\"grid p-0 md:grid-cols-2\">\n          <form className=\"p-6 md:p-8\">\n            <div className=\"flex flex-col gap-6\">\n              <div className=\"flex flex-col items-center text-center\">\n                <h1 className=\"text-2xl font-bold\">Welcome back</h1>\n                <p className=\"text-muted-foreground text-balance\">\n                  Login to your Acme Inc account\n                </p>\n              </div>\n              <div className=\"grid gap-3\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"m@example.com\"\n                  required\n                />\n              </div>\n              <div className=\"grid gap-3\">\n                <div className=\"flex items-center\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <a\n                    href=\"#\"\n                    className=\"ml-auto text-sm underline-offset-2 hover:underline\"\n                  >\n                    Forgot your password?\n                  </a>\n                </div>\n                <Input id=\"password\" type=\"password\" required />\n              </div>\n              <Button type=\"submit\" className=\"w-full\">\n                Login\n              </Button>\n              <div className=\"after:border-border relative text-center text-sm after:absolute after:inset-0 after:top-1/2 after:z-0 after:flex after:items-center after:border-t\">\n                <span className=\"bg-card text-muted-foreground relative z-10 px-2\">\n                  Or continue with\n                </span>\n              </div>\n              <div className=\"grid grid-cols-3 gap-4\">\n                <Button variant=\"outline\" type=\"button\" className=\"w-full\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                    <path\n                      d=\"M12.152 6.896c-.948 0-2.415-1.078-3.96-1.04-2.04.027-3.91 1.183-4.961 3.014-2.117 3.675-.546 9.103 1.519 12.09 1.013 1.454 2.208 3.09 3.792 3.039 1.52-.065 2.09-.987 3.935-.987 1.831 0 2.35.987 3.96.948 1.637-.026 2.676-1.48 3.676-2.948 1.156-1.688 1.636-3.325 1.662-3.415-.039-.013-3.182-1.221-3.22-4.857-.026-3.04 2.48-4.494 2.597-4.559-1.429-2.09-3.623-2.324-4.39-2.376-2-.156-3.675 1.09-4.61 1.09zM15.53 3.83c.843-1.012 1.4-2.427 1.245-3.83-1.207.052-2.662.805-3.532 1.818-.78.896-1.454 2.338-1.273 3.714 1.338.104 2.715-.688 3.559-1.701\"\n                      fill=\"currentColor\"\n                    />\n                  </svg>\n                  <span className=\"sr-only\">Login with Apple</span>\n                </Button>\n                <Button variant=\"outline\" type=\"button\" className=\"w-full\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                    <path\n                      d=\"M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z\"\n                      fill=\"currentColor\"\n                    />\n                  </svg>\n                  <span className=\"sr-only\">Login with Google</span>\n                </Button>\n                <Button variant=\"outline\" type=\"button\" className=\"w-full\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                    <path\n                      d=\"M6.915 4.03c-1.968 0-3.683 1.28-4.871 3.113C.704 9.208 0 11.883 0 14.449c0 .706.07 1.369.21 1.973a6.624 6.624 0 0 0 .265.86 5.297 5.297 0 0 0 .371.761c.696 1.159 1.818 1.927 3.593 1.927 1.497 0 2.633-.671 3.965-2.444.76-1.012 1.144-1.626 2.663-4.32l.756-1.339.186-.325c.061.1.121.196.183.3l2.152 3.595c.724 1.21 1.665 2.556 2.47 3.314 1.046.987 1.992 1.22 3.06 1.22 1.075 0 1.876-.355 2.455-.843a3.743 3.743 0 0 0 .81-.973c.542-.939.861-2.127.861-3.745 0-2.72-.681-5.357-2.084-7.45-1.282-1.912-2.957-2.93-4.716-2.93-1.047 0-2.088.467-3.053 1.308-.652.57-1.257 1.29-1.82 2.05-.69-.875-1.335-1.547-1.958-2.056-1.182-.966-2.315-1.303-3.454-1.303zm10.16 2.053c1.147 0 2.188.758 2.992 1.999 1.132 1.748 1.647 4.195 1.647 6.4 0 1.548-.368 2.9-1.839 2.9-.58 0-1.027-.23-1.664-1.004-.496-.601-1.343-1.878-2.832-4.358l-.617-1.028a44.908 44.908 0 0 0-1.255-1.98c.07-.109.141-.224.211-.327 1.12-1.667 2.118-2.602 3.358-2.602zm-10.201.553c1.265 0 2.058.791 2.675 1.446.307.327.737.871 1.234 1.579l-1.02 1.566c-.757 1.163-1.882 3.017-2.837 4.338-1.191 1.649-1.81 1.817-2.486 1.817-.524 0-1.038-.237-1.383-.794-.263-.426-.464-1.13-.464-2.046 0-2.221.63-4.535 1.66-6.088.454-.687.964-1.226 1.533-1.533a2.264 2.264 0 0 1 1.088-.285z\"\n                      fill=\"currentColor\"\n                    />\n                  </svg>\n                  <span className=\"sr-only\">Login with Meta</span>\n                </Button>\n              </div>\n              <div className=\"text-center text-sm\">\n                Don&apos;t have an account?{\" \"}\n                <a href=\"#\" className=\"underline underline-offset-4\">\n                  Sign up\n                </a>\n              </div>\n            </div>\n          </form>\n          <div className=\"bg-muted relative hidden md:block\">\n            <img\n              src=\"/placeholder.svg\"\n              alt=\"Image\"\n              className=\"absolute inset-0 h-full w-full object-cover dark:brightness-[0.2] dark:grayscale\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n      <div className=\"text-muted-foreground *:[a]:hover:text-primary text-center text-xs text-balance *:[a]:underline *:[a]:underline-offset-4\">\n        By clicking continue, you agree to our <a href=\"#\">Terms of Service</a>{\" \"}\n        and <a href=\"#\">Privacy Policy</a>.\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/registry/new-york-v4/blocks/sidebar-11/components/app-sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2303,2306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2303,2306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { ChevronRight, File, Folder } from \"lucide-react\"\n\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/registry/new-york-v4/ui/collapsible\"\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSub,\n  SidebarRail,\n} from \"@/registry/new-york-v4/ui/sidebar\"\n\n// This is sample data.\nconst data = {\n  changes: [\n    {\n      file: \"README.md\",\n      state: \"M\",\n    },\n    {\n      file: \"api/hello/route.ts\",\n      state: \"U\",\n    },\n    {\n      file: \"app/layout.tsx\",\n      state: \"M\",\n    },\n  ],\n  tree: [\n    [\n      \"app\",\n      [\n        \"api\",\n        [\"hello\", [\"route.ts\"]],\n        \"page.tsx\",\n        \"layout.tsx\",\n        [\"blog\", [\"page.tsx\"]],\n      ],\n    ],\n    [\n      \"components\",\n      [\"ui\", \"button.tsx\", \"card.tsx\"],\n      \"header.tsx\",\n      \"footer.tsx\",\n    ],\n    [\"lib\", [\"util.ts\"]],\n    \".eslintrc.json\",\n    \".gitignore\",\n    \"next.config.js\",\n    \"tailwind.config.js\",\n    \"package.json\",\n    \"README.md\",\n  ],\n}\n\nexport function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {\n  return (\n    <Sidebar {...props}>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Changes</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {data.changes.map((item, index) => (\n                <SidebarMenuItem key={index}>\n                  <SidebarMenuButton>\n                    <File />\n                    {item.file}\n                  </SidebarMenuButton>\n                  <SidebarMenuBadge>{item.state}</SidebarMenuBadge>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n        <SidebarGroup>\n          <SidebarGroupLabel>Files</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {data.tree.map((item, index) => (\n                <Tree key={index} item={item} />\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      <SidebarRail />\n    </Sidebar>\n  )\n}\n\nfunction Tree({ item }: { item: string | any[] }) {\n  const [name, ...items] = Array.isArray(item) ? item : [item]\n\n  if (!items.length) {\n    return (\n      <SidebarMenuButton\n        isActive={name === \"button.tsx\"}\n        className=\"data-[active=true]:bg-transparent\"\n      >\n        <File />\n        {name}\n      </SidebarMenuButton>\n    )\n  }\n\n  return (\n    <SidebarMenuItem>\n      <Collapsible\n        className=\"group/collapsible [&[data-state=open]>button>svg:first-child]:rotate-90\"\n        defaultOpen={name === \"components\" || name === \"ui\"}\n      >\n        <CollapsibleTrigger asChild>\n          <SidebarMenuButton>\n            <ChevronRight className=\"transition-transform\" />\n            <Folder />\n            {name}\n          </SidebarMenuButton>\n        </CollapsibleTrigger>\n        <CollapsibleContent>\n          <SidebarMenuSub>\n            {items.map((subItem, index) => (\n              <Tree key={index} item={subItem} />\n            ))}\n          </SidebarMenuSub>\n        </CollapsibleContent>\n      </Collapsible>\n    </SidebarMenuItem>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/registry/new-york-v4/blocks/sidebar-15/components/sidebar-right.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SidebarRail' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Plus } from \"lucide-react\"\n\nimport { Calendars } from \"@/registry/new-york-v4/blocks/sidebar-15/components/calendars\"\nimport { DatePicker } from \"@/registry/new-york-v4/blocks/sidebar-15/components/date-picker\"\nimport { NavUser } from \"@/registry/new-york-v4/blocks/sidebar-15/components/nav-user\"\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarRail,\n  SidebarSeparator,\n} from \"@/registry/new-york-v4/ui/sidebar\"\n\n// This is sample data.\nconst data = {\n  user: {\n    name: \"shadcn\",\n    email: \"m@example.com\",\n    avatar: \"/avatars/shadcn.jpg\",\n  },\n  calendars: [\n    {\n      name: \"My Calendars\",\n      items: [\"Personal\", \"Work\", \"Family\"],\n    },\n    {\n      name: \"Favorites\",\n      items: [\"Holidays\", \"Birthdays\"],\n    },\n    {\n      name: \"Other\",\n      items: [\"Travel\", \"Reminders\", \"Deadlines\"],\n    },\n  ],\n}\n\nexport function SidebarRight({\n  ...props\n}: React.ComponentProps<typeof Sidebar>) {\n  return (\n    <Sidebar\n      collapsible=\"none\"\n      className=\"sticky top-0 hidden h-svh border-l lg:flex\"\n      {...props}\n    >\n      <SidebarHeader className=\"border-sidebar-border h-16 border-b\">\n        <NavUser user={data.user} />\n      </SidebarHeader>\n      <SidebarContent>\n        <DatePicker />\n        <SidebarSeparator className=\"mx-0\" />\n        <Calendars calendars={data.calendars} />\n      </SidebarContent>\n      <SidebarFooter>\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton>\n              <Plus />\n              <span>New Calendar</span>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </Sidebar>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/registry/new-york-v4/charts/chart-pie-donut-active.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Label' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { TrendingUp } from \"lucide-react\"\nimport { Label, Pie, PieChart, Sector } from \"recharts\"\nimport { PieSectorDataItem } from \"recharts/types/polar/Pie\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york-v4/ui/card\"\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/registry/new-york-v4/ui/chart\"\n\nexport const description = \"A donut chart with an active sector\"\n\nconst chartData = [\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n  { browser: \"firefox\", visitors: 187, fill: \"var(--color-firefox)\" },\n  { browser: \"edge\", visitors: 173, fill: \"var(--color-edge)\" },\n  { browser: \"other\", visitors: 90, fill: \"var(--color-other)\" },\n]\n\nconst chartConfig = {\n  visitors: {\n    label: \"Visitors\",\n  },\n  chrome: {\n    label: \"Chrome\",\n    color: \"var(--chart-1)\",\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"var(--chart-2)\",\n  },\n  firefox: {\n    label: \"Firefox\",\n    color: \"var(--chart-3)\",\n  },\n  edge: {\n    label: \"Edge\",\n    color: \"var(--chart-4)\",\n  },\n  other: {\n    label: \"Other\",\n    color: \"var(--chart-5)\",\n  },\n} satisfies ChartConfig\n\nexport function ChartPieDonutActive() {\n  return (\n    <Card className=\"flex flex-col\">\n      <CardHeader className=\"items-center pb-0\">\n        <CardTitle>Pie Chart - Donut Active</CardTitle>\n        <CardDescription>January - June 2024</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-1 pb-0\">\n        <ChartContainer\n          config={chartConfig}\n          className=\"mx-auto aspect-square max-h-[250px]\"\n        >\n          <PieChart>\n            <ChartTooltip\n              cursor={false}\n              content={<ChartTooltipContent hideLabel />}\n            />\n            <Pie\n              data={chartData}\n              dataKey=\"visitors\"\n              nameKey=\"browser\"\n              innerRadius={60}\n              strokeWidth={5}\n              activeIndex={0}\n              activeShape={({\n                outerRadius = 0,\n                ...props\n              }: PieSectorDataItem) => (\n                <Sector {...props} outerRadius={outerRadius + 10} />\n              )}\n            />\n          </PieChart>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 leading-none font-medium\">\n          Trending up by 5.2% this month <TrendingUp className=\"h-4 w-4\" />\n        </div>\n        <div className=\"text-muted-foreground leading-none\">\n          Showing total visitors for the last 6 months\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/registry/new-york-v4/charts/chart-pie-stacked.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Label' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport { TrendingUp } from \"lucide-react\"\nimport { Label, Pie, PieChart } from \"recharts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york-v4/ui/card\"\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/registry/new-york-v4/ui/chart\"\n\nexport const description = \"A pie chart with stacked sections\"\n\nconst desktopData = [\n  { month: \"january\", desktop: 186, fill: \"var(--color-january)\" },\n  { month: \"february\", desktop: 305, fill: \"var(--color-february)\" },\n  { month: \"march\", desktop: 237, fill: \"var(--color-march)\" },\n  { month: \"april\", desktop: 173, fill: \"var(--color-april)\" },\n  { month: \"may\", desktop: 209, fill: \"var(--color-may)\" },\n]\n\nconst mobileData = [\n  { month: \"january\", mobile: 80, fill: \"var(--color-january)\" },\n  { month: \"february\", mobile: 200, fill: \"var(--color-february)\" },\n  { month: \"march\", mobile: 120, fill: \"var(--color-march)\" },\n  { month: \"april\", mobile: 190, fill: \"var(--color-april)\" },\n  { month: \"may\", mobile: 130, fill: \"var(--color-may)\" },\n]\n\nconst chartConfig = {\n  visitors: {\n    label: \"Visitors\",\n  },\n  desktop: {\n    label: \"Desktop\",\n  },\n  mobile: {\n    label: \"Mobile\",\n  },\n  january: {\n    label: \"January\",\n    color: \"var(--chart-1)\",\n  },\n  february: {\n    label: \"February\",\n    color: \"var(--chart-2)\",\n  },\n  march: {\n    label: \"March\",\n    color: \"var(--chart-3)\",\n  },\n  april: {\n    label: \"April\",\n    color: \"var(--chart-4)\",\n  },\n  may: {\n    label: \"May\",\n    color: \"var(--chart-5)\",\n  },\n} satisfies ChartConfig\n\nexport function ChartPieStacked() {\n  return (\n    <Card className=\"flex flex-col\">\n      <CardHeader className=\"items-center pb-0\">\n        <CardTitle>Pie Chart - Stacked</CardTitle>\n        <CardDescription>January - June 2024</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-1 pb-0\">\n        <ChartContainer\n          config={chartConfig}\n          className=\"mx-auto aspect-square max-h-[250px]\"\n        >\n          <PieChart>\n            <ChartTooltip\n              content={\n                <ChartTooltipContent\n                  labelKey=\"visitors\"\n                  nameKey=\"month\"\n                  indicator=\"line\"\n                  labelFormatter={(_, payload) => {\n                    return chartConfig[\n                      payload?.[0].dataKey as keyof typeof chartConfig\n                    ].label\n                  }}\n                />\n              }\n            />\n            <Pie data={desktopData} dataKey=\"desktop\" outerRadius={60} />\n            <Pie\n              data={mobileData}\n              dataKey=\"mobile\"\n              innerRadius={70}\n              outerRadius={90}\n            />\n          </PieChart>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 leading-none font-medium\">\n          Trending up by 5.2% this month <TrendingUp className=\"h-4 w-4\" />\n        </div>\n        <div className=\"text-muted-foreground leading-none\">\n          Showing total visitors for the last 6 months\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/registry/new-york-v4/charts/chart-radar-label-custom.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":72,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":47}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { TrendingUp } from \"lucide-react\"\nimport { PolarAngleAxis, PolarGrid, Radar, RadarChart } from \"recharts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york-v4/ui/card\"\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/registry/new-york-v4/ui/chart\"\n\nexport const description = \"A radar chart with a custom label\"\n\nconst chartData = [\n  { month: \"January\", desktop: 186, mobile: 80 },\n  { month: \"February\", desktop: 305, mobile: 200 },\n  { month: \"March\", desktop: 237, mobile: 120 },\n  { month: \"April\", desktop: 73, mobile: 190 },\n  { month: \"May\", desktop: 209, mobile: 130 },\n  { month: \"June\", desktop: 214, mobile: 140 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"var(--chart-1)\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"var(--chart-2)\",\n  },\n} satisfies ChartConfig\n\nexport function ChartRadarLabelCustom() {\n  return (\n    <Card>\n      <CardHeader className=\"items-center pb-4\">\n        <CardTitle>Radar Chart - Custom Label</CardTitle>\n        <CardDescription>\n          Showing total visitors for the last 6 months\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"pb-0\">\n        <ChartContainer\n          config={chartConfig}\n          className=\"mx-auto aspect-square max-h-[250px]\"\n        >\n          <RadarChart\n            data={chartData}\n            margin={{\n              top: 10,\n              right: 10,\n              bottom: 10,\n              left: 10,\n            }}\n          >\n            <ChartTooltip\n              cursor={false}\n              content={<ChartTooltipContent indicator=\"line\" />}\n            />\n            <PolarAngleAxis\n              dataKey=\"month\"\n              tick={({ x, y, textAnchor, value, index, ...props }) => {\n                const data = chartData[index]\n\n                return (\n                  <text\n                    x={x}\n                    y={index === 0 ? y - 10 : y}\n                    textAnchor={textAnchor}\n                    fontSize={13}\n                    fontWeight={500}\n                    {...props}\n                  >\n                    <tspan>{data.desktop}</tspan>\n                    <tspan className=\"fill-muted-foreground\">/</tspan>\n                    <tspan>{data.mobile}</tspan>\n                    <tspan\n                      x={x}\n                      dy={\"1rem\"}\n                      fontSize={12}\n                      className=\"fill-muted-foreground\"\n                    >\n                      {data.month}\n                    </tspan>\n                  </text>\n                )\n              }}\n            />\n\n            <PolarGrid />\n            <Radar\n              dataKey=\"desktop\"\n              fill=\"var(--color-desktop)\"\n              fillOpacity={0.6}\n            />\n            <Radar dataKey=\"mobile\" fill=\"var(--color-mobile)\" />\n          </RadarChart>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 leading-none font-medium\">\n          Trending up by 5.2% this month <TrendingUp className=\"h-4 w-4\" />\n        </div>\n        <div className=\"text-muted-foreground flex items-center gap-2 leading-none\">\n          January - June 2024\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/kkingstoun/git/containers_admin2/frontend/src/registry/new-york-v4/charts/chart-radar-radius.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PolarAngleAxis' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { TrendingUp } from \"lucide-react\"\nimport {\n  PolarAngleAxis,\n  PolarGrid,\n  PolarRadiusAxis,\n  Radar,\n  RadarChart,\n} from \"recharts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york-v4/ui/card\"\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/registry/new-york-v4/ui/chart\"\n\nexport const description = \"A radar chart with a radius axis\"\n\nconst chartData = [\n  { month: \"January\", desktop: 186, mobile: 80 },\n  { month: \"February\", desktop: 305, mobile: 200 },\n  { month: \"March\", desktop: 237, mobile: 120 },\n  { month: \"April\", desktop: 73, mobile: 190 },\n  { month: \"May\", desktop: 209, mobile: 130 },\n  { month: \"June\", desktop: 214, mobile: 140 },\n]\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"var(--chart-1)\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"var(--chart-2)\",\n  },\n} satisfies ChartConfig\n\nexport function ChartRadarRadius() {\n  return (\n    <Card>\n      <CardHeader className=\"items-center pb-4\">\n        <CardTitle>Radar Chart - Radius Axis</CardTitle>\n        <CardDescription>\n          Showing total visitors for the last 6 months\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"pb-0\">\n        <ChartContainer\n          config={chartConfig}\n          className=\"mx-auto aspect-square max-h-[250px]\"\n        >\n          <RadarChart data={chartData}>\n            <ChartTooltip\n              cursor={false}\n              content={\n                <ChartTooltipContent indicator=\"line\" labelKey=\"month\" />\n              }\n            />\n            <PolarGrid />\n            <Radar\n              dataKey=\"desktop\"\n              fill=\"var(--color-desktop)\"\n              fillOpacity={0.6}\n            />\n            <Radar dataKey=\"mobile\" fill=\"var(--color-mobile)\" />\n            <PolarRadiusAxis\n              angle={60}\n              stroke=\"hsla(var(--foreground))\"\n              orientation=\"middle\"\n              axisLine={false}\n            />\n          </RadarChart>\n        </ChartContainer>\n      </CardContent>\n      <CardFooter className=\"flex-col gap-2 text-sm\">\n        <div className=\"flex items-center gap-2 leading-none font-medium\">\n          Trending up by 5.2% this month <TrendingUp className=\"h-4 w-4\" />\n        </div>\n        <div className=\"text-muted-foreground flex items-center gap-2 leading-none\">\n          January - June 2024\n        </div>\n      </CardFooter>\n    </Card>\n  )\n}\n","usedDeprecatedRules":[]}]

info  - Need to disable some ESLint rules? Learn more here: https://nextjs.org/docs/app/api-reference/config/eslint#disabling-rules
